var search_data = {"index":{"searchIndex":["eventmachine","faraday","adapter","emhttp","manager","options","emsynchrony","parallelmanager","excon","nethttp","openssl","ssl","nethttppersistent","proxy_uri;","parallelism","patron","request","rack","test","stub","stubs","notfound","typhoeus","autoloadhelper","builder","handler","stacklocked","compositereadio","connection","error","clienterror","connectionfailed","missingdependency","parsingerror","resourcenotfound","timeouterror","middleware","middlewareregistry","request","authorization","basicauthentication","multipart","retry","tokenauthentication","urlencoded","response","logger","middleware","raiseerror","utils","headers","paramshash","object","==()","==()","uri()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","adapter()","add()","add()","advance_io()","all_loaded_constants()","app()","apply_request()","assert_index()","authorization()","autoload_all()","backtrace()","basic_auth()","body()","build()","build()","build_exclusive_url()","build_hash()","build_nested_query()","build_query()","build_request()","build_url()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","check_finished()","close()","configure()","configure_compression()","configure_proxy()","configure_proxy()","configure_ssl()","configure_ssl()","configure_ssl()","configure_timeout()","configure_timeout()","connection_config()","convert_key()","create()","create_multipart()","create_request()","create_session()","current_io()","deep_merge()","deep_merge!()","default_connection()","default_parallel_manager()","delete()","delete()","delete()","delete()","dependency()","dump_headers()","dup()","dup()","empty?()","ensure_open_and_readable()","error_message()","escape()","execute_request()","finish()","finished?()","get()","has_key?()","has_key?()","has_multipart?()","head()","header()","header()","header()","headers()","headers=()","headers=()","in_parallel()","in_parallel?()","include?()","include?()","inherited()","inherited()","insert()","insert_after()","insert_before()","inspect()","inspect()","key?()","key?()","klass()","length()","load_autoloaded_constants()","loaded?()","lock!()","locked?()","lookup_middleware()","marshal_dump()","marshal_load()","match()","match_content_type()","matches?()","matches?()","member?()","member?()","merge()","merge()","merge!()","merge!()","merge_query()","method_missing()","net_http_connection()","net_http_connection()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_stub()","normalize_params()","normalize_path()","normalize_path()","on_complete()","on_complete()","on_complete()","on_complete()","options()","parallel?()","parallel?()","params=()","params=()","params_match?()","parse()","parse_nested_query()","parse_query()","patch()","path_prefix=()","perform()","perform_request()","perform_request()","perform_request()","perform_request()","perform_request()","perform_single_request()","post()","process_params()","process_request?()","process_request?()","proxy()","put()","queue()","raise_error()","raise_if_locked()","read()","read_body()","read_body()","read_body()","register_middleware()","register_middleware()","replace()","replace()","request()","request()","request_config()","request_options()","request_options()","request_type()","require_lib()","require_libs()","reset()","response()","response_values()","rewind()","run()","run()","run_request()","running?()","save_response()","setup_parallel_manager()","setup_parallel_manager()","setup_parallel_manager()","sort_query_params()","ssl_cert_store()","ssl_verify_mode()","status()","success?()","supports_parallel?()","swap()","tap()","to_app()","to_env()","to_hash()","to_query()","to_s()","token_auth()","unescape()","update()","update()","url()","url_prefix=()","use()","use_symbol()","verify_stubbed_calls()","with_uri_credentials()"],"longSearchIndex":["eventmachine","faraday","faraday::adapter","faraday::adapter::emhttp","faraday::adapter::emhttp::manager","faraday::adapter::emhttp::options","faraday::adapter::emsynchrony","faraday::adapter::emsynchrony::parallelmanager","faraday::adapter::excon","faraday::adapter::nethttp","faraday::adapter::nethttp::openssl","faraday::adapter::nethttp::openssl::ssl","faraday::adapter::nethttppersistent","faraday::adapter::nethttppersistent::proxy_uri;","faraday::adapter::parallelism","faraday::adapter::patron","faraday::adapter::patron::request","faraday::adapter::rack","faraday::adapter::test","faraday::adapter::test::stub","faraday::adapter::test::stubs","faraday::adapter::test::stubs::notfound","faraday::adapter::typhoeus","faraday::autoloadhelper","faraday::builder","faraday::builder::handler","faraday::builder::stacklocked","faraday::compositereadio","faraday::connection","faraday::error","faraday::error::clienterror","faraday::error::connectionfailed","faraday::error::missingdependency","faraday::error::parsingerror","faraday::error::resourcenotfound","faraday::error::timeouterror","faraday::middleware","faraday::middlewareregistry","faraday::request","faraday::request::authorization","faraday::request::basicauthentication","faraday::request::multipart","faraday::request::retry","faraday::request::tokenauthentication","faraday::request::urlencoded","faraday::response","faraday::response::logger","faraday::response::middleware","faraday::response::raiseerror","faraday::utils","faraday::utils::headers","faraday::utils::paramshash","object","faraday::builder#==()","faraday::builder::handler#==()","faraday::connection::uri()","faraday::builder#[]()","faraday::request#[]()","faraday::utils::headers#[]()","faraday::utils::paramshash#[]()","faraday::request#[]=()","faraday::utils::headers#[]=()","faraday::utils::paramshash#[]=()","faraday::builder#adapter()","faraday::adapter::emhttp::manager#add()","faraday::adapter::emsynchrony::parallelmanager#add()","faraday::compositereadio#advance_io()","faraday::autoloadhelper#all_loaded_constants()","faraday::connection#app()","faraday::response#apply_request()","faraday::builder#assert_index()","faraday::connection#authorization()","faraday::autoloadhelper#autoload_all()","faraday::error::clienterror#backtrace()","faraday::connection#basic_auth()","faraday::response#body()","faraday::builder#build()","faraday::builder::handler#build()","faraday::connection#build_exclusive_url()","faraday::request::authorization::build_hash()","faraday::utils#build_nested_query()","faraday::utils#build_query()","faraday::connection#build_request()","faraday::connection#build_url()","faraday::adapter#call()","faraday::adapter::emhttp#call()","faraday::adapter::emsynchrony#call()","faraday::adapter::excon#call()","faraday::adapter::nethttp#call()","faraday::adapter::patron#call()","faraday::adapter::rack#call()","faraday::adapter::test#call()","faraday::adapter::typhoeus#call()","faraday::request::authorization#call()","faraday::request::multipart#call()","faraday::request::retry#call()","faraday::request::urlencoded#call()","faraday::response::logger#call()","faraday::response::middleware#call()","faraday::adapter::emhttp::manager#check_finished()","faraday::compositereadio#close()","faraday::adapter::test#configure()","faraday::adapter::emhttp::options#configure_compression()","faraday::adapter::emhttp::options#configure_proxy()","faraday::adapter::typhoeus#configure_proxy()","faraday::adapter::nethttp#configure_ssl()","faraday::adapter::nethttppersistent#configure_ssl()","faraday::adapter::typhoeus#configure_ssl()","faraday::adapter::emhttp::options#configure_timeout()","faraday::adapter::typhoeus#configure_timeout()","faraday::adapter::emhttp::options#connection_config()","faraday::utils::paramshash#convert_key()","faraday::request::create()","faraday::request::multipart#create_multipart()","faraday::adapter::nethttp#create_request()","faraday::adapter::patron#create_session()","faraday::compositereadio#current_io()","faraday::utils#deep_merge()","faraday::utils#deep_merge!()","faraday::default_connection()","faraday::connection#default_parallel_manager()","faraday::adapter::test::stubs#delete()","faraday::builder#delete()","faraday::utils::headers#delete()","faraday::utils::paramshash#delete()","faraday::middleware::dependency()","faraday::response::logger#dump_headers()","faraday::builder#dup()","faraday::connection#dup()","faraday::adapter::test::stubs#empty?()","faraday::compositereadio#ensure_open_and_readable()","faraday::adapter::emhttp#error_message()","faraday::utils#escape()","faraday::adapter::rack#execute_request()","faraday::response#finish()","faraday::response#finished?()","faraday::adapter::test::stubs#get()","faraday::utils::headers#has_key?()","faraday::utils::paramshash#has_key?()","faraday::request::multipart#has_multipart?()","faraday::adapter::test::stubs#head()","faraday::request::authorization::header()","faraday::request::basicauthentication::header()","faraday::request::tokenauthentication::header()","faraday::response#headers()","faraday::connection#headers=()","faraday::request#headers=()","faraday::connection#in_parallel()","faraday::connection#in_parallel?()","faraday::utils::headers#include?()","faraday::utils::paramshash#include?()","faraday::adapter::parallelism#inherited()","faraday::middleware::inherited()","faraday::builder#insert()","faraday::builder#insert_after()","faraday::builder#insert_before()","faraday::builder::handler#inspect()","faraday::error::clienterror#inspect()","faraday::utils::headers#key?()","faraday::utils::paramshash#key?()","faraday::builder::handler#klass()","faraday::compositereadio#length()","faraday::autoloadhelper#load_autoloaded_constants()","faraday::middleware::loaded?()","faraday::builder#lock!()","faraday::builder#locked?()","faraday::middlewareregistry#lookup_middleware()","faraday::response#marshal_dump()","faraday::response#marshal_load()","faraday::adapter::test::stubs#match()","faraday::request::urlencoded#match_content_type()","faraday::adapter::test::stub#matches?()","faraday::adapter::test::stubs#matches?()","faraday::utils::headers#member?()","faraday::utils::paramshash#member?()","faraday::utils::headers#merge()","faraday::utils::paramshash#merge()","faraday::utils::headers#merge!()","faraday::utils::paramshash#merge!()","faraday::utils::paramshash#merge_query()","faraday::method_missing()","faraday::adapter::nethttp#net_http_connection()","faraday::adapter::nethttppersistent#net_http_connection()","faraday::new()","faraday::adapter::emhttp::manager::new()","faraday::adapter::patron::new()","faraday::adapter::rack::new()","faraday::adapter::test::new()","faraday::adapter::test::stub::new()","faraday::adapter::test::stubs::new()","faraday::builder::new()","faraday::builder::handler::new()","faraday::compositereadio::new()","faraday::connection::new()","faraday::error::clienterror::new()","faraday::error::timeouterror::new()","faraday::middleware::new()","faraday::middleware::new()","faraday::request::authorization::new()","faraday::request::retry::new()","faraday::request::tokenauthentication::new()","faraday::response::new()","faraday::response::logger::new()","faraday::utils::headers::new()","faraday::adapter::test::stubs#new_stub()","faraday::utils#normalize_params()","faraday::adapter::test::stubs#normalize_path()","faraday::utils#normalize_path()","faraday::response#on_complete()","faraday::response::logger#on_complete()","faraday::response::middleware#on_complete()","faraday::response::raiseerror#on_complete()","faraday::adapter::test::stubs#options()","faraday::adapter::emhttp#parallel?()","faraday::adapter::typhoeus#parallel?()","faraday::connection#params=()","faraday::request#params=()","faraday::adapter::test::stub#params_match?()","faraday::utils::headers#parse()","faraday::utils#parse_nested_query()","faraday::utils#parse_query()","faraday::adapter::test::stubs#patch()","faraday::connection#path_prefix=()","faraday::adapter::emsynchrony::parallelmanager#perform()","faraday::adapter::emhttp#perform_request()","faraday::adapter::emhttp::manager#perform_request()","faraday::adapter::nethttp#perform_request()","faraday::adapter::nethttppersistent#perform_request()","faraday::adapter::typhoeus#perform_request()","faraday::adapter::emhttp#perform_single_request()","faraday::adapter::test::stubs#post()","faraday::request::multipart#process_params()","faraday::request::multipart#process_request?()","faraday::request::urlencoded#process_request?()","faraday::connection#proxy()","faraday::adapter::test::stubs#put()","faraday::adapter::emsynchrony::parallelmanager#queue()","faraday::adapter::emhttp#raise_error()","faraday::builder#raise_if_locked()","faraday::compositereadio#read()","faraday::adapter::emhttp::options#read_body()","faraday::adapter::excon#read_body()","faraday::adapter::typhoeus#read_body()","faraday::register_middleware()","faraday::middlewareregistry#register_middleware()","faraday::utils::headers#replace()","faraday::utils::paramshash#replace()","faraday::adapter::typhoeus#request()","faraday::builder#request()","faraday::adapter::emhttp::options#request_config()","faraday::adapter::emhttp::options#request_options()","faraday::adapter::typhoeus#request_options()","faraday::request::urlencoded#request_type()","faraday::require_lib()","faraday::require_libs()","faraday::adapter::emhttp::manager#reset()","faraday::builder#response()","faraday::response::raiseerror#response_values()","faraday::compositereadio#rewind()","faraday::adapter::emhttp::manager#run()","faraday::adapter::emsynchrony::parallelmanager#run()","faraday::connection#run_request()","faraday::adapter::emhttp::manager#running?()","faraday::adapter#save_response()","faraday::adapter::emhttp::setup_parallel_manager()","faraday::adapter::emsynchrony::setup_parallel_manager()","faraday::adapter::typhoeus::setup_parallel_manager()","faraday::utils#sort_query_params()","faraday::adapter::nethttp#ssl_cert_store()","faraday::adapter::nethttp#ssl_verify_mode()","faraday::response#status()","faraday::response#success?()","faraday::adapter::parallelism#supports_parallel?()","faraday::builder#swap()","object#tap()","faraday::builder#to_app()","faraday::request#to_env()","faraday::utils::headers#to_hash()","faraday::utils::paramshash#to_query()","faraday::adapter::test::stub#to_s()","faraday::connection#token_auth()","faraday::utils#unescape()","faraday::utils::headers#update()","faraday::utils::paramshash#update()","faraday::request#url()","faraday::connection#url_prefix=()","faraday::builder#use()","faraday::builder#use_symbol()","faraday::adapter::test::stubs#verify_stubbed_calls()","faraday::connection#with_uri_credentials()"],"info":[["EventMachine","","EventMachine.html","",""],["Faraday","","Faraday.html","","<p>Rely on autoloading instead of explicit require; helps avoid the “already\ninitialized constant” …\n"],["Faraday::Adapter","","Faraday/Adapter.html","",""],["Faraday::Adapter::EMHttp","","Faraday/Adapter/EMHttp.html","","<p>EventMachine adapter is useful for either asynchronous requests when in EM\nreactor loop or for making …\n"],["Faraday::Adapter::EMHttp::Manager","","Faraday/Adapter/EMHttp/Manager.html","","<p>The parallel manager is designed to start an EventMachine loop and block\nuntil all registered requests …\n"],["Faraday::Adapter::EMHttp::Options","","Faraday/Adapter/EMHttp/Options.html","",""],["Faraday::Adapter::EMSynchrony","","Faraday/Adapter/EMSynchrony.html","",""],["Faraday::Adapter::EMSynchrony::ParallelManager","","Faraday/Adapter/EMSynchrony/ParallelManager.html","",""],["Faraday::Adapter::Excon","","Faraday/Adapter/Excon.html","",""],["Faraday::Adapter::NetHttp","","Faraday/Adapter/NetHttp.html","",""],["Faraday::Adapter::NetHttp::OpenSSL","","Faraday/Adapter/NetHttp/OpenSSL.html","",""],["Faraday::Adapter::NetHttp::OpenSSL::SSL","","Faraday/Adapter/NetHttp/OpenSSL/SSL.html","",""],["Faraday::Adapter::NetHttpPersistent","","Faraday/Adapter/NetHttpPersistent.html","","<p>Experimental adapter for net-http-persistent\n"],["Faraday::Adapter::NetHttpPersistent::proxy_uri;","","Faraday/Adapter/NetHttpPersistent/proxy_uri;.html","",""],["Faraday::Adapter::Parallelism","","Faraday/Adapter/Parallelism.html","",""],["Faraday::Adapter::Patron","","Faraday/Adapter/Patron.html","",""],["Faraday::Adapter::Patron::Request","","Faraday/Adapter/Patron/Request.html","",""],["Faraday::Adapter::Rack","","Faraday/Adapter/Rack.html","","<p>Sends requests to a Rack app.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyRackApp</span>\n  <span class=\"ruby-keyword\">def</span> <span class=\"ruby-identifier\">call</span>(<span class=\"ruby-identifier\">env</span>)\n    [<span class=\"ruby-value\">200</span>, {<span class=\"ruby-string\">&#39;Content-Type&#39;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&#39;text/html&#39;</span>}, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Faraday::Adapter::Test","","Faraday/Adapter/Test.html","","<p>test = Faraday::Connection.new do\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">use</span> <span class=\"ruby-constant\">Faraday</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Adapter</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Test</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">stub</span><span class=\"ruby-operator\">|</span>\n  <span class=\"ruby-identifier\">stub</span>.<span class=\"ruby-identifier\">get</span> <span class=\"ruby-string\">&#39;/nigiri/sake.json&#39;</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Faraday::Adapter::Test::Stub","","Faraday/Adapter/Test/Stub.html","",""],["Faraday::Adapter::Test::Stubs","","Faraday/Adapter/Test/Stubs.html","",""],["Faraday::Adapter::Test::Stubs::NotFound","","Faraday/Adapter/Test/Stubs/NotFound.html","",""],["Faraday::Adapter::Typhoeus","","Faraday/Adapter/Typhoeus.html","",""],["Faraday::AutoloadHelper","","Faraday/AutoloadHelper.html","",""],["Faraday::Builder","","Faraday/Builder.html","","<p>Possibly going to extend this a bit.\n<p>Faraday::Connection.new(:url =&gt; &#39;sushi.com&#39;) do |builder| …\n"],["Faraday::Builder::Handler","","Faraday/Builder/Handler.html","","<p>borrowed from ActiveSupport::Dependencies::Reference &amp;\nActionDispatch::MiddlewareStack::Middleware …\n"],["Faraday::Builder::StackLocked","","Faraday/Builder/StackLocked.html","","<p>Error raised when trying to modify the stack after calling `lock!`\n"],["Faraday::CompositeReadIO","","Faraday/CompositeReadIO.html","","<p>Similar but not compatible with ::CompositeReadIO provided by\nmultipart-post.\n"],["Faraday::Connection","","Faraday/Connection.html","",""],["Faraday::Error","","Faraday/Error.html","",""],["Faraday::Error::ClientError","","Faraday/Error/ClientError.html","",""],["Faraday::Error::ConnectionFailed","","Faraday/Error/ConnectionFailed.html","",""],["Faraday::Error::MissingDependency","","Faraday/Error/MissingDependency.html","",""],["Faraday::Error::ParsingError","","Faraday/Error/ParsingError.html","",""],["Faraday::Error::ResourceNotFound","","Faraday/Error/ResourceNotFound.html","",""],["Faraday::Error::TimeoutError","","Faraday/Error/TimeoutError.html","",""],["Faraday::Middleware","","Faraday/Middleware.html","",""],["Faraday::MiddlewareRegistry","","Faraday/MiddlewareRegistry.html","",""],["Faraday::Request","","Faraday/Request.html","","<p>Used to setup urls, params, headers, and the request body in a sane manner.\n\n<pre class=\"ruby\"><span class=\"ruby-ivar\">@connection</span>.<span class=\"ruby-identifier\">post</span> <span class=\"ruby-keyword\">do</span> <span class=\"ruby-operator\">|</span><span class=\"ruby-identifier\">req</span><span class=\"ruby-operator\">|</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Faraday::Request::Authorization","","Faraday/Request/Authorization.html","",""],["Faraday::Request::BasicAuthentication","","Faraday/Request/BasicAuthentication.html","",""],["Faraday::Request::Multipart","","Faraday/Request/Multipart.html","",""],["Faraday::Request::Retry","","Faraday/Request/Retry.html","",""],["Faraday::Request::TokenAuthentication","","Faraday/Request/TokenAuthentication.html","",""],["Faraday::Request::UrlEncoded","","Faraday/Request/UrlEncoded.html","",""],["Faraday::Response","","Faraday/Response.html","",""],["Faraday::Response::Logger","","Faraday/Response/Logger.html","",""],["Faraday::Response::Middleware","","Faraday/Response/Middleware.html","","<p>Used for simple response middleware.\n"],["Faraday::Response::RaiseError","","Faraday/Response/RaiseError.html","",""],["Faraday::Utils","","Faraday/Utils.html","",""],["Faraday::Utils::Headers","","Faraday/Utils/Headers.html","","<p>Adapted from Rack::Utils::HeaderHash\n"],["Faraday::Utils::ParamsHash","","Faraday/Utils/ParamsHash.html","","<p>hash with stringified keys\n"],["Object","","Object.html","","<p>not pulling in active-support JUST for this method.  And I love this\nmethod.\n"],["==","Faraday::Builder","Faraday/Builder.html#method-i-3D-3D","(other)",""],["==","Faraday::Builder::Handler","Faraday/Builder/Handler.html#method-i-3D-3D","(other)",""],["URI","Faraday::Connection","Faraday/Connection.html#method-c-URI","(url)","<p>normalize URI() behavior across Ruby versions\n"],["[]","Faraday::Builder","Faraday/Builder.html#method-i-5B-5D","(idx)",""],["[]","Faraday::Request","Faraday/Request.html#method-i-5B-5D","(key)",""],["[]","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-5B-5D","(k)",""],["[]","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-5B-5D","(key)",""],["[]=","Faraday::Request","Faraday/Request.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-5B-5D-3D","(k, v)",""],["[]=","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-5B-5D-3D","(key, value)",""],["adapter","Faraday::Builder","Faraday/Builder.html#method-i-adapter","(key, *args, &block)",""],["add","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-add","()",""],["add","Faraday::Adapter::EMSynchrony::ParallelManager","Faraday/Adapter/EMSynchrony/ParallelManager.html#method-i-add","(request, method, *args, &block)","<p>Add requests to queue. The `request` argument should be a `EM::HttpRequest`\nobject.\n"],["advance_io","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-advance_io","()",""],["all_loaded_constants","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-all_loaded_constants","()",""],["app","Faraday::Connection","Faraday/Connection.html#method-i-app","()","<p>The “rack app” wrapped in middleware. All requests are sent here.\n<p>The builder is responsible …\n"],["apply_request","Faraday::Response","Faraday/Response.html#method-i-apply_request","(request_env)","<p>Expand the env with more properties, without overriding existing ones.\nUseful for applying request params …\n"],["assert_index","Faraday::Builder","Faraday/Builder.html#method-i-assert_index","(index)",""],["authorization","Faraday::Connection","Faraday/Connection.html#method-i-authorization","(type, token)",""],["autoload_all","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-autoload_all","(prefix, options)",""],["backtrace","Faraday::Error::ClientError","Faraday/Error/ClientError.html#method-i-backtrace","()",""],["basic_auth","Faraday::Connection","Faraday/Connection.html#method-i-basic_auth","(login, pass)",""],["body","Faraday::Response","Faraday/Response.html#method-i-body","()",""],["build","Faraday::Builder","Faraday/Builder.html#method-i-build","(options = {})",""],["build","Faraday::Builder::Handler","Faraday/Builder/Handler.html#method-i-build","(app)",""],["build_exclusive_url","Faraday::Connection","Faraday/Connection.html#method-i-build_exclusive_url","(url, params = nil)","<p>Internal: Build an absolute URL based on url_prefix.\n<p>url    - A String or URI-like object params - A  …\n"],["build_hash","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-build_hash","(type, hash)","<p>Internal\n"],["build_nested_query","Faraday::Utils","Faraday/Utils.html#method-i-build_nested_query","(value, prefix = nil)","<p>Rack&#39;s version modified to handle non-String values\n"],["build_query","Faraday::Utils","Faraday/Utils.html#method-i-build_query","(params)","<p>Copied from Rack\n"],["build_request","Faraday::Connection","Faraday/Connection.html#method-i-build_request","(method)","<p>Internal: Creates and configures the request object.\n<p>Returns the new Request.\n"],["build_url","Faraday::Connection","Faraday/Connection.html#method-i-build_url","(url, extra_params = nil)","<p>Takes a relative url for a request and combines it with the defaults set on\nthe connection instance. …\n"],["call","Faraday::Adapter","Faraday/Adapter.html#method-i-call","(env)",""],["call","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-call","(env)",""],["call","Faraday::Adapter::EMSynchrony","Faraday/Adapter/EMSynchrony.html#method-i-call","(env)",""],["call","Faraday::Adapter::Excon","Faraday/Adapter/Excon.html#method-i-call","(env)",""],["call","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-call","(env)",""],["call","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-call","(env)",""],["call","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-i-call","(env)",""],["call","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-i-call","(env)",""],["call","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-call","(env)",""],["call","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-i-call","(env)","<p>Public\n"],["call","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-call","(env)",""],["call","Faraday::Request::Retry","Faraday/Request/Retry.html#method-i-call","(env)",""],["call","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-call","(env)",""],["call","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-call","(env)",""],["call","Faraday::Response::Middleware","Faraday/Response/Middleware.html#method-i-call","(env)",""],["check_finished","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-check_finished","()",""],["close","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-close","()",""],["configure","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-i-configure","()",""],["configure_compression","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_compression","(options, env)",""],["configure_proxy","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_proxy","(options, env)",""],["configure_proxy","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_proxy","(req, env)",""],["configure_ssl","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-configure_ssl","(http, ssl)",""],["configure_ssl","Faraday::Adapter::NetHttpPersistent","Faraday/Adapter/NetHttpPersistent.html#method-i-configure_ssl","(http, ssl)",""],["configure_ssl","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_ssl","(req, env)",""],["configure_timeout","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-configure_timeout","(options, env)",""],["configure_timeout","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-configure_timeout","(req, env)",""],["connection_config","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-connection_config","(env)",""],["convert_key","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-convert_key","(key)",""],["create","Faraday::Request","Faraday/Request.html#method-c-create","(request_method)",""],["create_multipart","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-create_multipart","(env, params)",""],["create_request","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-create_request","(env)",""],["create_session","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-i-create_session","()",""],["current_io","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-current_io","()",""],["deep_merge","Faraday::Utils","Faraday/Utils.html#method-i-deep_merge","(source, hash)","<p>Recursive hash merge\n"],["deep_merge!","Faraday::Utils","Faraday/Utils.html#method-i-deep_merge-21","(target, hash)","<p>Recursive hash update\n"],["default_connection","Faraday","Faraday.html#method-c-default_connection","()",""],["default_parallel_manager","Faraday::Connection","Faraday/Connection.html#method-i-default_parallel_manager","()","<p>Internal: Traverse the middleware stack in search of a parallel-capable\nadapter.\n<p>Yields in case of not …\n"],["delete","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-delete","(path, &block)",""],["delete","Faraday::Builder","Faraday/Builder.html#method-i-delete","(handler)",""],["delete","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-delete","(k)",""],["delete","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-delete","(key)",""],["dependency","Faraday::Middleware","Faraday/Middleware.html#method-c-dependency","(lib = nil)","<p>Executes a block which should try to require and reference dependent\nlibraries\n"],["dump_headers","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-dump_headers","(headers)",""],["dup","Faraday::Builder","Faraday/Builder.html#method-i-dup","()",""],["dup","Faraday::Connection","Faraday/Connection.html#method-i-dup","()",""],["empty?","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-empty-3F","()",""],["ensure_open_and_readable","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-ensure_open_and_readable","()",""],["error_message","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-error_message","(client)",""],["escape","Faraday::Utils","Faraday/Utils.html#method-i-escape","(s)",""],["execute_request","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-i-execute_request","(env, rack_env)",""],["finish","Faraday::Response","Faraday/Response.html#method-i-finish","(env)",""],["finished?","Faraday::Response","Faraday/Response.html#method-i-finished-3F","()",""],["get","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-get","(path, &block)",""],["has_key?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-has_key-3F","(k)",""],["has_key?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-has_key-3F","(key)",""],["has_multipart?","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-has_multipart-3F","(obj)",""],["head","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-head","(path, &block)",""],["header","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-header","(type, token)","<p>Public\n"],["header","Faraday::Request::BasicAuthentication","Faraday/Request/BasicAuthentication.html#method-c-header","(login, pass)","<p>Public\n"],["header","Faraday::Request::TokenAuthentication","Faraday/Request/TokenAuthentication.html#method-c-header","(token, options = nil)","<p>Public\n"],["headers","Faraday::Response","Faraday/Response.html#method-i-headers","()",""],["headers=","Faraday::Connection","Faraday/Connection.html#method-i-headers-3D","(hash)","<p>Public: Replace default request headers.\n"],["headers=","Faraday::Request","Faraday/Request.html#method-i-headers-3D","(hash)","<p>Public: Replace request headers, preserving the existing hash type\n"],["in_parallel","Faraday::Connection","Faraday/Connection.html#method-i-in_parallel","(manager = nil)",""],["in_parallel?","Faraday::Connection","Faraday/Connection.html#method-i-in_parallel-3F","()",""],["include?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-include-3F","(k)",""],["include?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-include-3F","(key)",""],["inherited","Faraday::Adapter::Parallelism","Faraday/Adapter/Parallelism.html#method-i-inherited","(subclass)",""],["inherited","Faraday::Middleware","Faraday/Middleware.html#method-c-inherited","(subclass)",""],["insert","Faraday::Builder","Faraday/Builder.html#method-i-insert","(index, *args, &block)","<p>methods to push onto the various positions in the stack:\n"],["insert_after","Faraday::Builder","Faraday/Builder.html#method-i-insert_after","(index, *args, &block)",""],["insert_before","Faraday::Builder","Faraday/Builder.html#method-i-insert_before","(index, *args, &block)",""],["inspect","Faraday::Builder::Handler","Faraday/Builder/Handler.html#method-i-inspect","()",""],["inspect","Faraday::Error::ClientError","Faraday/Error/ClientError.html#method-i-inspect","()",""],["key?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-key-3F","(k)",""],["key?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-key-3F","(key)",""],["klass","Faraday::Builder::Handler","Faraday/Builder/Handler.html#method-i-klass","()",""],["length","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-length","()",""],["load_autoloaded_constants","Faraday::AutoloadHelper","Faraday/AutoloadHelper.html#method-i-load_autoloaded_constants","()","<p>Loads each autoloaded constant.  If thread safety is a concern, wrap this\nin a Mutex.\n"],["loaded?","Faraday::Middleware","Faraday/Middleware.html#method-c-loaded-3F","()",""],["lock!","Faraday::Builder","Faraday/Builder.html#method-i-lock-21","()","<p>Locks the middleware stack to ensure no further modifications are possible.\n"],["locked?","Faraday::Builder","Faraday/Builder.html#method-i-locked-3F","()",""],["lookup_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-lookup_middleware","(key)","<p>Internal: Lookup middleware class with a registered Symbol shortcut.\n<p>Returns a middleware Class.\n"],["marshal_dump","Faraday::Response","Faraday/Response.html#method-i-marshal_dump","()","<p>because @on_complete_callbacks cannot be marshalled\n"],["marshal_load","Faraday::Response","Faraday/Response.html#method-i-marshal_load","(env)",""],["match","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-match","(request_method, path, body)",""],["match_content_type","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-match_content_type","(env)",""],["matches?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-matches-3F","(request_uri, request_body)",""],["matches?","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-matches-3F","(stack, path, body)",""],["member?","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-member-3F","(k)",""],["member?","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-member-3F","(key)",""],["merge","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-merge","(other)",""],["merge","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge","(params)",""],["merge!","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-merge-21","(other)",""],["merge!","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge-21","(params)",""],["merge_query","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-merge_query","(query)",""],["method_missing","Faraday","Faraday.html#method-c-method_missing","(name, *args, &block)",""],["net_http_connection","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-net_http_connection","(env)",""],["net_http_connection","Faraday::Adapter::NetHttpPersistent","Faraday/Adapter/NetHttpPersistent.html#method-i-net_http_connection","(env)",""],["new","Faraday","Faraday.html#method-c-new","(url = nil, options = {})",""],["new","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-c-new","()",""],["new","Faraday::Adapter::Patron","Faraday/Adapter/Patron.html#method-c-new","(app, &block)",""],["new","Faraday::Adapter::Rack","Faraday/Adapter/Rack.html#method-c-new","(faraday_app, rack_app)",""],["new","Faraday::Adapter::Test","Faraday/Adapter/Test.html#method-c-new","(app, stubs=nil, &block)",""],["new","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-c-new","(full, body, block)",""],["new","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-c-new","()",""],["new","Faraday::Builder","Faraday/Builder.html#method-c-new","(handlers = [])",""],["new","Faraday::Builder::Handler","Faraday/Builder/Handler.html#method-c-new","(klass, *args, &block)",""],["new","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-c-new","(*parts)",""],["new","Faraday::Connection","Faraday/Connection.html#method-c-new","(url = nil, options = {})","<p>Public: Initializes a new Faraday::Connection.\n<p>url     - URI or String base URL to use as a prefix for …\n"],["new","Faraday::Error::ClientError","Faraday/Error/ClientError.html#method-c-new","(ex, response = nil)",""],["new","Faraday::Error::TimeoutError","Faraday/Error/TimeoutError.html#method-c-new","(ex = nil)",""],["new","Faraday::Middleware","Faraday/Middleware.html#method-c-new","(app = nil)",""],["new","Faraday::Middleware","Faraday/Middleware.html#method-c-new","(*)",""],["new","Faraday::Request::Authorization","Faraday/Request/Authorization.html#method-c-new","(app, type, token)",""],["new","Faraday::Request::Retry","Faraday/Request/Retry.html#method-c-new","(app, retries = 2)",""],["new","Faraday::Request::TokenAuthentication","Faraday/Request/TokenAuthentication.html#method-c-new","(app, token, options = nil)",""],["new","Faraday::Response","Faraday/Response.html#method-c-new","(env = nil)",""],["new","Faraday::Response::Logger","Faraday/Response/Logger.html#method-c-new","(app, logger = nil)",""],["new","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-c-new","(hash={})",""],["new_stub","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-new_stub","(request_method, path, body=nil, &block)",""],["normalize_params","Faraday::Utils","Faraday/Utils.html#method-i-normalize_params","(params, name, v = nil)","<p>Stolen from Rack\n"],["normalize_path","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-normalize_path","(path)","<p>ensure leading + trailing slash\n"],["normalize_path","Faraday::Utils","Faraday/Utils.html#method-i-normalize_path","(url)","<p>Receives a URL and returns just the path with the query string sorted.\n"],["on_complete","Faraday::Response","Faraday/Response.html#method-i-on_complete","()",""],["on_complete","Faraday::Response::Logger","Faraday/Response/Logger.html#method-i-on_complete","(env)",""],["on_complete","Faraday::Response::Middleware","Faraday/Response/Middleware.html#method-i-on_complete","(env)","<p>Override this to modify the environment after the response has finished.\nCalls the `parse` method if …\n"],["on_complete","Faraday::Response::RaiseError","Faraday/Response/RaiseError.html#method-i-on_complete","(env)",""],["options","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-options","(path, &block)",""],["parallel?","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-parallel-3F","(env)",""],["parallel?","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-parallel-3F","(env)",""],["params=","Faraday::Connection","Faraday/Connection.html#method-i-params-3D","(hash)","<p>Public: Replace default query parameters.\n"],["params=","Faraday::Request","Faraday/Request.html#method-i-params-3D","(hash)","<p>Public: Replace params, preserving the existing hash type\n"],["params_match?","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-params_match-3F","(request_params)",""],["parse","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-parse","(header_string)",""],["parse_nested_query","Faraday::Utils","Faraday/Utils.html#method-i-parse_nested_query","(qs)",""],["parse_query","Faraday::Utils","Faraday/Utils.html#method-i-parse_query","(qs)","<p>Adapted from Rack\n"],["patch","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-patch","(path, body=nil, &block)",""],["path_prefix=","Faraday::Connection","Faraday/Connection.html#method-i-path_prefix-3D","(value)","<p>Ensures that the path prefix always has a leading but no trailing slash\n"],["perform","Faraday::Adapter::EMSynchrony::ParallelManager","Faraday/Adapter/EMSynchrony/ParallelManager.html#method-i-perform","()","<p>Main `EM::Synchrony::Multi` performer.\n"],["perform_request","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-perform_request","(env)",""],["perform_request","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-perform_request","()",""],["perform_request","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-perform_request","(http, env)",""],["perform_request","Faraday::Adapter::NetHttpPersistent","Faraday/Adapter/NetHttpPersistent.html#method-i-perform_request","(http, env)",""],["perform_request","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-perform_request","(env)",""],["perform_single_request","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-perform_single_request","(env)","<p>TODO: reuse the connection to support pipelining\n"],["post","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-post","(path, body=nil, &block)",""],["process_params","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-process_params","(params, prefix = nil, pieces = nil, &block)",""],["process_request?","Faraday::Request::Multipart","Faraday/Request/Multipart.html#method-i-process_request-3F","(env)",""],["process_request?","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-process_request-3F","(env)",""],["proxy","Faraday::Connection","Faraday/Connection.html#method-i-proxy","(arg = nil)",""],["put","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-put","(path, body=nil, &block)",""],["queue","Faraday::Adapter::EMSynchrony::ParallelManager","Faraday/Adapter/EMSynchrony/ParallelManager.html#method-i-queue","()","<p>The request queue.\n"],["raise_error","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-i-raise_error","(msg)",""],["raise_if_locked","Faraday::Builder","Faraday/Builder.html#method-i-raise_if_locked","()",""],["read","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-read","(length = nil, outbuf = nil)","<p>Read from IOs in order until `length` bytes have been received.\n"],["read_body","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-read_body","(env)",""],["read_body","Faraday::Adapter::Excon","Faraday/Adapter/Excon.html#method-i-read_body","(env)","<p>TODO: support streaming requests\n"],["read_body","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-read_body","(env)","<p>TODO: support streaming requests\n"],["register_middleware","Faraday","Faraday.html#method-c-register_middleware","(type, mapping = nil)","<p>Public: register middleware classes under a short name.\n<p>type    - A Symbol specifying the kind of middleware …\n"],["register_middleware","Faraday::MiddlewareRegistry","Faraday/MiddlewareRegistry.html#method-i-register_middleware","(mapping)","<p>Internal: Register middleware class(es) on the current module.\n<p>mapping - A Hash mapping Symbol keys to …\n"],["replace","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-replace","(other)",""],["replace","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-replace","(other)",""],["request","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-request","(env)",""],["request","Faraday::Builder","Faraday/Builder.html#method-i-request","(key, *args, &block)",""],["request_config","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-request_config","(env)",""],["request_options","Faraday::Adapter::EMHttp::Options","Faraday/Adapter/EMHttp/Options.html#method-i-request_options","(env)",""],["request_options","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-i-request_options","(env)",""],["request_type","Faraday::Request::UrlEncoded","Faraday/Request/UrlEncoded.html#method-i-request_type","(env)",""],["require_lib","Faraday","Faraday.html#method-c-require_lib","(*libs)",""],["require_libs","Faraday","Faraday.html#method-c-require_libs","(*libs)",""],["reset","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-reset","()",""],["response","Faraday::Builder","Faraday/Builder.html#method-i-response","(key, *args, &block)",""],["response_values","Faraday::Response::RaiseError","Faraday/Response/RaiseError.html#method-i-response_values","(env)",""],["rewind","Faraday::CompositeReadIO","Faraday/CompositeReadIO.html#method-i-rewind","()",""],["run","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-run","()",""],["run","Faraday::Adapter::EMSynchrony::ParallelManager","Faraday/Adapter/EMSynchrony/ParallelManager.html#method-i-run","()","<p>Run all requests on queue with `EM::Synchrony::Multi`, wrapping it in a\nreactor and fiber if needed. …\n"],["run_request","Faraday::Connection","Faraday/Connection.html#method-i-run_request","(method, url, body, headers)",""],["running?","Faraday::Adapter::EMHttp::Manager","Faraday/Adapter/EMHttp/Manager.html#method-i-running-3F","()",""],["save_response","Faraday::Adapter","Faraday/Adapter.html#method-i-save_response","(env, status, body, headers = nil)",""],["setup_parallel_manager","Faraday::Adapter::EMHttp","Faraday/Adapter/EMHttp.html#method-c-setup_parallel_manager","(options = nil)",""],["setup_parallel_manager","Faraday::Adapter::EMSynchrony","Faraday/Adapter/EMSynchrony.html#method-c-setup_parallel_manager","(options = {})",""],["setup_parallel_manager","Faraday::Adapter::Typhoeus","Faraday/Adapter/Typhoeus.html#method-c-setup_parallel_manager","(options = {})",""],["sort_query_params","Faraday::Utils","Faraday/Utils.html#method-i-sort_query_params","(query)",""],["ssl_cert_store","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-ssl_cert_store","(ssl)",""],["ssl_verify_mode","Faraday::Adapter::NetHttp","Faraday/Adapter/NetHttp.html#method-i-ssl_verify_mode","(ssl)",""],["status","Faraday::Response","Faraday/Response.html#method-i-status","()",""],["success?","Faraday::Response","Faraday/Response.html#method-i-success-3F","()",""],["supports_parallel?","Faraday::Adapter::Parallelism","Faraday/Adapter/Parallelism.html#method-i-supports_parallel-3F","()",""],["swap","Faraday::Builder","Faraday/Builder.html#method-i-swap","(index, *args, &block)",""],["tap","Object","Object.html#method-i-tap","()","<p>Yields <code>x</code> to the block, and then returns <code>x</code>. The\nprimary purpose of this method is to “tap into” …\n"],["to_app","Faraday::Builder","Faraday/Builder.html#method-i-to_app","(inner_app)",""],["to_env","Faraday::Request","Faraday/Request.html#method-i-to_env","(connection)","<p>ENV Keys :method - a symbolized request method (:get, :post) :body   - the\nrequest body that will eventually …\n"],["to_hash","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-to_hash","()",""],["to_query","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-to_query","()",""],["to_s","Faraday::Adapter::Test::Stub","Faraday/Adapter/Test/Stub.html#method-i-to_s","()",""],["token_auth","Faraday::Connection","Faraday/Connection.html#method-i-token_auth","(token, options = nil)",""],["unescape","Faraday::Utils","Faraday/Utils.html#method-i-unescape","(s)",""],["update","Faraday::Utils::Headers","Faraday/Utils/Headers.html#method-i-update","(other)",""],["update","Faraday::Utils::ParamsHash","Faraday/Utils/ParamsHash.html#method-i-update","(params)",""],["url","Faraday::Request","Faraday/Request.html#method-i-url","(path, params = nil)",""],["url_prefix=","Faraday::Connection","Faraday/Connection.html#method-i-url_prefix-3D","(url)","<p>Parses the giving url with URI and stores the individual components in this\nconnection.  These components …\n"],["use","Faraday::Builder","Faraday/Builder.html#method-i-use","(klass, *args, &block)",""],["use_symbol","Faraday::Builder","Faraday/Builder.html#method-i-use_symbol","(mod, key, *args, &block)",""],["verify_stubbed_calls","Faraday::Adapter::Test::Stubs","Faraday/Adapter/Test/Stubs.html#method-i-verify_stubbed_calls","()","<p>Raises an error if any of the stubbed calls have not been made.\n"],["with_uri_credentials","Faraday::Connection","Faraday/Connection.html#method-i-with_uri_credentials","(uri)","<p>Internal: Yields username and password extracted from a URI if they both\nexist.\n"]]}}