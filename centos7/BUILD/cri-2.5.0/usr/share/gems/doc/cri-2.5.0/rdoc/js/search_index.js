var search_data = {"index":{"searchIndex":["cri","argumentarray","command","optionparserpartitioningdelegate","commanddsl","commandrunner","coreextensions","string","error","helprenderer","nohelpavailableerror","notimplementederror","optionparser","illegaloptionerror","optionrequiresanargumenterror","string","<=>()","add_argument()","add_command()","add_option()","add_option()","aliases()","append_description()","append_option_group()","append_options()","append_subcommands()","append_summary()","append_usage()","argument_added()","arguments()","be_hidden()","call()","command()","command_named()","commands_named()","define()","define_command()","description()","find_option_value()","flag()","forbidden()","format_opt_def()","formatted_as_command()","formatted_as_option()","formatted_as_title()","global_option_definitions()","handle_dash_option()","handle_dashdash()","handle_dashdash_option()","handle_options()","handle_parser_errors_while()","help()","modify()","name()","new()","new()","new()","new()","new()","new()","new_basic_help()","new_basic_root()","opt()","option()","option_added()","optional()","parse()","partition()","raw()","render()","required()","run()","run()","run()","run()","run_this()","runner()","running?()","stop()","subcommand()","summary()","to_paragraphs()","usage()","wrap_and_indent()","license","news"],"longSearchIndex":["cri","cri::argumentarray","cri::command","cri::command::optionparserpartitioningdelegate","cri::commanddsl","cri::commandrunner","cri::coreextensions","cri::coreextensions::string","cri::error","cri::helprenderer","cri::nohelpavailableerror","cri::notimplementederror","cri::optionparser","cri::optionparser::illegaloptionerror","cri::optionparser::optionrequiresanargumenterror","string","cri::command#<=>()","cri::optionparser#add_argument()","cri::command#add_command()","cri::commanddsl#add_option()","cri::optionparser#add_option()","cri::commanddsl#aliases()","cri::helprenderer#append_description()","cri::helprenderer#append_option_group()","cri::helprenderer#append_options()","cri::helprenderer#append_subcommands()","cri::helprenderer#append_summary()","cri::helprenderer#append_usage()","cri::command::optionparserpartitioningdelegate#argument_added()","cri::optionparser#arguments()","cri::commanddsl#be_hidden()","cri::commandrunner#call()","cri::commanddsl#command()","cri::command#command_named()","cri::command#commands_named()","cri::command::define()","cri::command#define_command()","cri::commanddsl#description()","cri::optionparser#find_option_value()","cri::commanddsl#flag()","cri::commanddsl#forbidden()","cri::helprenderer#format_opt_def()","cri::coreextensions::string#formatted_as_command()","cri::coreextensions::string#formatted_as_option()","cri::coreextensions::string#formatted_as_title()","cri::command#global_option_definitions()","cri::optionparser#handle_dash_option()","cri::optionparser#handle_dashdash()","cri::optionparser#handle_dashdash_option()","cri::command#handle_options()","cri::command#handle_parser_errors_while()","cri::command#help()","cri::command#modify()","cri::commanddsl#name()","cri::argumentarray::new()","cri::command::new()","cri::commanddsl::new()","cri::commandrunner::new()","cri::helprenderer::new()","cri::optionparser::new()","cri::command::new_basic_help()","cri::command::new_basic_root()","cri::commanddsl#opt()","cri::commanddsl#option()","cri::command::optionparserpartitioningdelegate#option_added()","cri::commanddsl#optional()","cri::optionparser::parse()","cri::command#partition()","cri::argumentarray#raw()","cri::helprenderer#render()","cri::commanddsl#required()","cri::command#run()","cri::commanddsl#run()","cri::commandrunner#run()","cri::optionparser#run()","cri::command#run_this()","cri::commanddsl#runner()","cri::optionparser#running?()","cri::optionparser#stop()","cri::commanddsl#subcommand()","cri::commanddsl#summary()","cri::coreextensions::string#to_paragraphs()","cri::commanddsl#usage()","cri::coreextensions::string#wrap_and_indent()","",""],"info":[["Cri","","Cri.html","",""],["Cri::ArgumentArray","","Cri/ArgumentArray.html","","<p>Represents an array of arguments. It is an array that strips separator\narguments (`–`) but provides …\n"],["Cri::Command","","Cri/Command.html","","<p>Cri::Command represents a command that can be executed on the commandline.\nIt is also used for the commandline …\n"],["Cri::Command::OptionParserPartitioningDelegate","","Cri/Command/OptionParserPartitioningDelegate.html","","<p>Delegate used for partitioning the list of arguments and options. This\ndelegate will stop the parser …\n"],["Cri::CommandDSL","","Cri/CommandDSL.html","","<p>The command DSL is a class that is used for building and modifying\ncommands.\n"],["Cri::CommandRunner","","Cri/CommandRunner.html","","<p>A command runner is responsible for the execution of a command. Using it is\noptional, but it is useful …\n"],["Cri::CoreExtensions","","Cri/CoreExtensions.html","",""],["Cri::CoreExtensions::String","","Cri/CoreExtensions/String.html","",""],["Cri::Error","","Cri/Error.html","","<p>A generic error class for all Cri-specific errors.\n"],["Cri::HelpRenderer","","Cri/HelpRenderer.html","",""],["Cri::NoHelpAvailableError","","Cri/NoHelpAvailableError.html","","<p>Error that will be raised when no help is available because the help\ncommand has no supercommand for …\n"],["Cri::NotImplementedError","","Cri/NotImplementedError.html","","<p>Error that will be raised when an implementation for a method or command is\nmissing. For commands, this …\n"],["Cri::OptionParser","","Cri/OptionParser.html","","<p>Cri::OptionParser is used for parsing commandline options.\n<p>Option definitions are hashes with the keys …\n"],["Cri::OptionParser::IllegalOptionError","","Cri/OptionParser/IllegalOptionError.html","","<p>Error that will be raised when an unknown option is encountered.\n"],["Cri::OptionParser::OptionRequiresAnArgumentError","","Cri/OptionParser/OptionRequiresAnArgumentError.html","","<p>Error that will be raised when an option without argument is encountered.\n"],["String","","String.html","",""],["<=>","Cri::Command","Cri/Command.html#method-i-3C-3D-3E","(other)","<p>Compares this command&#39;s name to the other given command&#39;s name.\n"],["add_argument","Cri::OptionParser","Cri/OptionParser.html#method-i-add_argument","(value)",""],["add_command","Cri::Command","Cri/Command.html#method-i-add_command","(command)","<p>Adds the given command as a subcommand to the current command.\n<p>@param [Cri::Command] command The command …\n"],["add_option","Cri::CommandDSL","Cri/CommandDSL.html#method-i-add_option","(short, long, desc, argument, block)",""],["add_option","Cri::OptionParser","Cri/OptionParser.html#method-i-add_option","(definition, value)",""],["aliases","Cri::CommandDSL","Cri/CommandDSL.html#method-i-aliases","(*args)","<p>Sets the command aliases.\n<p>@param [String, Symbol, Array] args The new command aliases\n<p>@return [void]\n"],["append_description","Cri::HelpRenderer","Cri/HelpRenderer.html#method-i-append_description","(text)",""],["append_option_group","Cri::HelpRenderer","Cri/HelpRenderer.html#method-i-append_option_group","(text, name, defs, length)",""],["append_options","Cri::HelpRenderer","Cri/HelpRenderer.html#method-i-append_options","(text)",""],["append_subcommands","Cri::HelpRenderer","Cri/HelpRenderer.html#method-i-append_subcommands","(text)",""],["append_summary","Cri::HelpRenderer","Cri/HelpRenderer.html#method-i-append_summary","(text)",""],["append_usage","Cri::HelpRenderer","Cri/HelpRenderer.html#method-i-append_usage","(text)",""],["argument_added","Cri::Command::OptionParserPartitioningDelegate","Cri/Command/OptionParserPartitioningDelegate.html#method-i-argument_added","(argument, option_parser)","<p>Called when an argument is parsed.\n<p>@param [String] argument The argument\n<p>@param [Cri::OptionParser] option_parser …\n"],["arguments","Cri::OptionParser","Cri/OptionParser.html#method-i-arguments","()","<p>Returns the arguments that have already been parsed.\n<p>If the parser was stopped before it finished, this …\n"],["be_hidden","Cri::CommandDSL","Cri/CommandDSL.html#method-i-be_hidden","()","<p>Marks the command as hidden. Hidden commands do not show up in the list of\nsubcommands of the parent …\n"],["call","Cri::CommandRunner","Cri/CommandRunner.html#method-i-call","()","<p>Runs the command. By default, this simply does the actual execution, but\nsubclasses may choose to add …\n"],["command","Cri::CommandDSL","Cri/CommandDSL.html#method-i-command","()","<p>@return [Cri::Command] The built command\n"],["command_named","Cri::Command","Cri/Command.html#method-i-command_named","(name)","<p>Returns the command with the given name. This method will display error\nmessages and exit in case of …\n"],["commands_named","Cri::Command","Cri/Command.html#method-i-commands_named","(name)","<p>Returns the commands that could be referred to with the given name. If the\nresult contains more than …\n"],["define","Cri::Command","Cri/Command.html#method-c-define","(string=nil, filename=nil, &block)","<p>Creates a new command using the DSL. If a string is given, the command will\nbe defined using the string; …\n"],["define_command","Cri::Command","Cri/Command.html#method-i-define_command","(name=nil, &block)","<p>Defines a new subcommand for the current command using the DSL.\n<p>@param [String, nil] name The name of …\n"],["description","Cri::CommandDSL","Cri/CommandDSL.html#method-i-description","(arg)","<p>Sets the command description.\n<p>@param [String] arg The new command description\n<p>@return [void]\n"],["find_option_value","Cri::OptionParser","Cri/OptionParser.html#method-i-find_option_value","(definition, option_key)",""],["flag","Cri::CommandDSL","Cri/CommandDSL.html#method-i-flag","(short, long, desc, &block)","<p>Adds a new option with a forbidden argument to the command. If a block is\ngiven, it will be executed …\n"],["forbidden","Cri::CommandDSL","Cri/CommandDSL.html#method-i-forbidden","(short, long, desc, &block)",""],["format_opt_def","Cri::HelpRenderer","Cri/HelpRenderer.html#method-i-format_opt_def","(opt_def, length)",""],["formatted_as_command","Cri::CoreExtensions::String","Cri/CoreExtensions/String.html#method-i-formatted_as_command","()","<p>@return [String] The string, formatted to be used as the name of a command\n\n<pre>in the help</pre>\n"],["formatted_as_option","Cri::CoreExtensions::String","Cri/CoreExtensions/String.html#method-i-formatted_as_option","()","<p>@return [String] The string, formatted to be used as an option definition\n\n<pre>of a command in the help</pre>\n"],["formatted_as_title","Cri::CoreExtensions::String","Cri/CoreExtensions/String.html#method-i-formatted_as_title","()","<p>@return [String] The string, formatted to be used as a title in a section\n\n<pre>in the help</pre>\n"],["global_option_definitions","Cri::Command","Cri/Command.html#method-i-global_option_definitions","()","<p>@return [Hash] The option definitions for the command itself and all its\n\n<pre>ancestors</pre>\n"],["handle_dash_option","Cri::OptionParser","Cri/OptionParser.html#method-i-handle_dash_option","(e)",""],["handle_dashdash","Cri::OptionParser","Cri/OptionParser.html#method-i-handle_dashdash","(e)",""],["handle_dashdash_option","Cri::OptionParser","Cri/OptionParser.html#method-i-handle_dashdash_option","(e)",""],["handle_options","Cri::Command","Cri/Command.html#method-i-handle_options","(opts)",""],["handle_parser_errors_while","Cri::Command","Cri/Command.html#method-i-handle_parser_errors_while","(&block)",""],["help","Cri::Command","Cri/Command.html#method-i-help","(params={})","<p>@return [String] The help text for this command\n"],["modify","Cri::Command","Cri/Command.html#method-i-modify","(&block)","<p>Modifies the command using the DSL.\n<p>If the block has one parameter, the block will be executed in the …\n"],["name","Cri::CommandDSL","Cri/CommandDSL.html#method-i-name","(arg)","<p>Sets the command name.\n<p>@param [String] arg The new command name\n<p>@return [void]\n"],["new","Cri::ArgumentArray","Cri/ArgumentArray.html#method-c-new","(raw_arguments)","<p>Initializes the array using the given raw arguments.\n<p>@param [Array&lt;String&gt;] raw_arguments A list …\n"],["new","Cri::Command","Cri/Command.html#method-c-new","()",""],["new","Cri::CommandDSL","Cri/CommandDSL.html#method-c-new","(command=nil)","<p>@param [Cri::Command, nil] command The command to modify, or nil if a\n\n<pre>new command should be created</pre>\n"],["new","Cri::CommandRunner","Cri/CommandRunner.html#method-c-new","(options, arguments, command)","<p>@param [Hash] options A hash contain the options and their values\n<p>@param [Array] arguments The list of …\n"],["new","Cri::HelpRenderer","Cri/HelpRenderer.html#method-c-new","(cmd, params={})",""],["new","Cri::OptionParser","Cri/OptionParser.html#method-c-new","(arguments_and_options, definitions)","<p>Creates a new parser with the given options/arguments and definitions.\n<p>@param [Array&lt;String&gt;] arguments_and_options …\n"],["new_basic_help","Cri::Command","Cri/Command.html#method-c-new_basic_help","()","<p>Returns a new command that implements showing help.\n<p>@return [Cri::Command] A basic help command\n"],["new_basic_root","Cri::Command","Cri/Command.html#method-c-new_basic_root","()","<p>Returns a new command that has support for the `-h`/`–help` option and also\nhas a `help` subcommand. …\n"],["opt","Cri::CommandDSL","Cri/CommandDSL.html#method-i-opt","(short, long, desc, params={}, &block)",""],["option","Cri::CommandDSL","Cri/CommandDSL.html#method-i-option","(short, long, desc, params={}, &block)","<p>Adds a new option to the command. If a block is given, it will be executed\nwhen the option is successfully …\n"],["option_added","Cri::Command::OptionParserPartitioningDelegate","Cri/Command/OptionParserPartitioningDelegate.html#method-i-option_added","(key, value, option_parser)","<p>Called when an option is parsed.\n<p>@param [Symbol] key The option key (derived from the long format)\n<p>@param …\n"],["optional","Cri::CommandDSL","Cri/CommandDSL.html#method-i-optional","(short, long, desc, &block)","<p>Adds a new option with an optional argument to the command. If a block is\ngiven, it will be executed …\n"],["parse","Cri::OptionParser","Cri/OptionParser.html#method-c-parse","(arguments_and_options, definitions)","<p>Parses the commandline arguments. See the instance `parse` method for\ndetails.\n<p>@param [Array&lt;String&gt;] …\n"],["partition","Cri::Command","Cri/Command.html#method-i-partition","(opts_and_args)",""],["raw","Cri::ArgumentArray","Cri/ArgumentArray.html#method-i-raw","()","<p>@return [Array&lt;String&gt;] The arguments, including any separator\narguments\n\n<pre>(`--`)</pre>\n"],["render","Cri::HelpRenderer","Cri/HelpRenderer.html#method-i-render","()",""],["required","Cri::CommandDSL","Cri/CommandDSL.html#method-i-required","(short, long, desc, &block)","<p>Adds a new option with a required argument to the command. If a block is\ngiven, it will be executed when …\n"],["run","Cri::Command","Cri/Command.html#method-i-run","(opts_and_args, parent_opts={})","<p>Runs the command with the given commandline arguments, possibly invoking\nsubcommands and passing on the …\n"],["run","Cri::CommandDSL","Cri/CommandDSL.html#method-i-run","(&block)","<p>Sets the run block to the given block. The given block should have two or\nthree arguments (options, arguments, …\n"],["run","Cri::CommandRunner","Cri/CommandRunner.html#method-i-run","()","<p>Performs the actual execution of the command.\n<p>@return [void]\n<p>@abstract\n"],["run","Cri::OptionParser","Cri/OptionParser.html#method-i-run","()","<p>Parses the commandline arguments into options and arguments.\n<p>During parsing, two errors can be raised: …\n"],["run_this","Cri::Command","Cri/Command.html#method-i-run_this","(opts_and_args, parent_opts={})","<p>Runs the actual command with the given commandline arguments, not invoking\nany subcommands. If the command …\n"],["runner","Cri::CommandDSL","Cri/CommandDSL.html#method-i-runner","(klass)","<p>Defines the runner class for this command. Calling this will override\nexisting run block or runner declarations …\n"],["running?","Cri::OptionParser","Cri/OptionParser.html#method-i-running-3F","()","<p>@return [Boolean] true if the parser is running, false otherwise.\n"],["stop","Cri::OptionParser","Cri/OptionParser.html#method-i-stop","()","<p>Stops the parser. The parser will finish its current parse cycle but will\nnot start parsing new options …\n"],["subcommand","Cri::CommandDSL","Cri/CommandDSL.html#method-i-subcommand","(command=nil, &block)","<p>Adds a subcommand to the current command. The command can either be given\nexplicitly, or a block can …\n"],["summary","Cri::CommandDSL","Cri/CommandDSL.html#method-i-summary","(arg)","<p>Sets the command summary.\n<p>@param [String] arg The new command summary\n<p>@return [void]\n"],["to_paragraphs","Cri::CoreExtensions::String","Cri/CoreExtensions/String.html#method-i-to_paragraphs","()","<p>Extracts individual paragraphs (separated by two newlines).\n<p>@return [Array&lt;String&gt;] A list of paragraphs …\n"],["usage","Cri::CommandDSL","Cri/CommandDSL.html#method-i-usage","(arg)","<p>Sets the command usage. The usage should not include the “usage:” prefix,\nnor should it include the command …\n"],["wrap_and_indent","Cri::CoreExtensions::String","Cri/CoreExtensions/String.html#method-i-wrap_and_indent","(width, indentation)","<p>Word-wraps and indents the string.\n<p>@param [Number] width The maximal width of each line. This also includes …\n"],["LICENSE","","LICENSE.html","","<p>Copyright © 2009 Denis Defreyne and contributors\n<p>Permission is hereby granted, free of charge, to any …\n"],["NEWS","","NEWS_md.html","","<p>Cri News\n<p>2.5.0\n<p>Made the default help command handle subcommands\n"]]}}