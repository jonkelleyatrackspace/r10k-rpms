var search_data = {"index":{"searchIndex":["log4r","basicformatter","configerror","configurator","datefileoutputter","defaultformatter","emailoutputter","fileoutputter","formatter","gdc","iooutputter","log4jxmlformatter","log4rconfig","log4rtools","logevent","logserver","logger","loggerfactory","repository","mdc","ndc","objectformatter","outputter","outputterfactory","patternformatter","rompclient","rompserver","remoteoutputter","rollingfileoutputter","rootlogger","scribeoutputter","simpleformatter","stderroutputter","stdoutoutputter","syslogoutputter","udpoutputter","yamlconfigurator","object","rexml","element","==()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","actual_load()","actual_load()","add()","add()","additive=()","additive=()","canonical_log()","canonical_log()","canonical_log()","canonical_log()","change()","check_thread_instance()","check_thread_instance()","clear()","clear()","clone_stack()","close()","close()","closed?()","closed?()","comma_split()","custom_levels()","custom_levels()","deal_with_inheritance()","decode_bool()","decode_custom_levels()","decode_custom_levels()","decode_formatter()","decode_formatter()","decode_hash_params()","decode_hash_params()","decode_immediate_at()","decode_logger()","decode_logger()","decode_logger_common()","decode_logger_common()","decode_logserver()","decode_logserver()","decode_outputter()","decode_outputter()","decode_parameter()","decode_parameters()","decode_parameters()","decode_pre_config()","decode_pre_config()","decode_xml()","decode_yaml()","detect_rexml()","each()","each()","each_logger()","each_outputter()","flush()","flush()","flush()","format()","format()","format()","format()","format()","format()","format_object()","formatter=()","get()","get()","get()","get()","get_context()","get_current_sequence_number()","get_depth()","get_levels_map()","global()","global_config()","global_config()","inherit()","is_root?()","is_root?()","level=()","level=()","level=()","levels()","load_xml_file()","load_xml_string()","load_yaml_file()","load_yaml_string()","log_internal()","makenewfilename()","makenewfilename()","map_levels_by_name_to_syslog()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","only_at()","open_log_file()","outputters=()","outputters=()","paramsub()","paramsub()","parent=()","parse_caller()","peek()","pop()","purge_log_files()","push()","put()","remove()","remove()","remove()","remove()","requireschange()","requiresroll()","roll()","root()","send_mail()","set()","set_max_depth()","stderr()","stdout()","synch()","trace=()","trace=()","valid_level?()","validate()","validate_hash()","validate_level()","validate_name()","validate_smtp_params()","write()","write()","write()","write()","write()","write()","gdc","mdc","ndc","configurator","emailoutputter","formatter","log4jxmlformatter","log4r","logger","logserver","outputter","patternformatter","scribeoutputter","syslogoutputter","win32eventoutputter","yamlconfigurator"],"longSearchIndex":["log4r","log4r::basicformatter","log4r::configerror","log4r::configurator","log4r::datefileoutputter","log4r::defaultformatter","log4r::emailoutputter","log4r::fileoutputter","log4r::formatter","log4r::gdc","log4r::iooutputter","log4r::log4jxmlformatter","log4r::log4rconfig","log4r::log4rtools","log4r::logevent","log4r::logserver","log4r::logger","log4r::logger::loggerfactory","log4r::logger::repository","log4r::mdc","log4r::ndc","log4r::objectformatter","log4r::outputter","log4r::outputter::outputterfactory","log4r::patternformatter","log4r::rompclient","log4r::rompserver","log4r::remoteoutputter","log4r::rollingfileoutputter","log4r::rootlogger","log4r::scribeoutputter","log4r::simpleformatter","log4r::stderroutputter","log4r::stdoutoutputter","log4r::syslogoutputter","log4r::udpoutputter","log4r::yamlconfigurator","object","rexml","rexml::element","log4r::logger#==()","log4r::configurator::[]()","log4r::logger::[]()","log4r::outputter::[]()","log4r::yamlconfigurator::[]()","log4r::configurator::[]=()","log4r::outputter::[]=()","log4r::yamlconfigurator::[]=()","log4r::configurator::actual_load()","log4r::yamlconfigurator::actual_load()","log4r::logger#add()","log4r::rootlogger#add()","log4r::logger#additive=()","log4r::rootlogger#additive=()","log4r::emailoutputter#canonical_log()","log4r::outputter#canonical_log()","log4r::remoteoutputter#canonical_log()","log4r::syslogoutputter#canonical_log()","log4r::datefileoutputter#change()","log4r::mdc::check_thread_instance()","log4r::ndc::check_thread_instance()","log4r::gdc::clear()","log4r::ndc::clear()","log4r::ndc::clone_stack()","log4r::iooutputter#close()","log4r::syslogoutputter#close()","log4r::iooutputter#closed?()","log4r::syslogoutputter#closed?()","log4r::log4rtools::comma_split()","log4r::configurator::custom_levels()","log4r::yamlconfigurator::custom_levels()","log4r::logger#deal_with_inheritance()","log4r::log4rtools::decode_bool()","log4r::configurator::decode_custom_levels()","log4r::yamlconfigurator::decode_custom_levels()","log4r::configurator::decode_formatter()","log4r::yamlconfigurator::decode_formatter()","log4r::configurator::decode_hash_params()","log4r::yamlconfigurator::decode_hash_params()","log4r::emailoutputter#decode_immediate_at()","log4r::configurator::decode_logger()","log4r::yamlconfigurator::decode_logger()","log4r::configurator::decode_logger_common()","log4r::yamlconfigurator::decode_logger_common()","log4r::configurator::decode_logserver()","log4r::yamlconfigurator::decode_logserver()","log4r::configurator::decode_outputter()","log4r::yamlconfigurator::decode_outputter()","log4r::configurator::decode_parameter()","log4r::configurator::decode_parameters()","log4r::yamlconfigurator::decode_parameters()","log4r::configurator::decode_pre_config()","log4r::yamlconfigurator::decode_pre_config()","log4r::configurator::decode_xml()","log4r::yamlconfigurator::decode_yaml()","log4r::configurator::detect_rexml()","log4r::logger::each()","log4r::outputter::each()","log4r::logger::each_logger()","log4r::outputter::each_outputter()","log4r::emailoutputter#flush()","log4r::outputter#flush()","log4r::remoteoutputter#flush()","log4r::basicformatter#format()","log4r::formatter#format()","log4r::log4jxmlformatter#format()","log4r::objectformatter#format()","log4r::outputter#format()","log4r::simpleformatter#format()","log4r::basicformatter#format_object()","log4r::outputter#formatter=()","log4r::gdc::get()","log4r::logger::get()","log4r::mdc::get()","log4r::ndc::get()","log4r::mdc::get_context()","log4r::rollingfileoutputter#get_current_sequence_number()","log4r::ndc::get_depth()","log4r::syslogoutputter#get_levels_map()","log4r::logger::global()","log4r::configurator::global_config()","log4r::yamlconfigurator::global_config()","log4r::ndc::inherit()","log4r::logger#is_root?()","log4r::rootlogger#is_root?()","log4r::logger#level=()","log4r::outputter#level=()","log4r::rootlogger#level=()","log4r::logger#levels()","log4r::configurator::load_xml_file()","log4r::configurator::load_xml_string()","log4r::yamlconfigurator::load_yaml_file()","log4r::yamlconfigurator::load_yaml_string()","log4r::logger::log_internal()","log4r::datefileoutputter#makenewfilename()","log4r::rollingfileoutputter#makenewfilename()","log4r::syslogoutputter#map_levels_by_name_to_syslog()","log4r::basicformatter::new()","log4r::datefileoutputter::new()","log4r::emailoutputter::new()","log4r::fileoutputter::new()","log4r::formatter::new()","log4r::iooutputter::new()","log4r::logevent::new()","log4r::logserver::new()","log4r::logger::new()","log4r::outputter::new()","log4r::patternformatter::new()","log4r::remoteoutputter::new()","log4r::rollingfileoutputter::new()","log4r::rootlogger::new()","log4r::scribeoutputter::new()","log4r::stderroutputter::new()","log4r::stdoutoutputter::new()","log4r::syslogoutputter::new()","log4r::udpoutputter::new()","log4r::outputter#only_at()","log4r::rollingfileoutputter#open_log_file()","log4r::logger#outputters=()","log4r::rootlogger#outputters=()","log4r::configurator::paramsub()","log4r::yamlconfigurator::paramsub()","log4r::logger#parent=()","log4r::log4jxmlformatter#parse_caller()","log4r::ndc::peek()","log4r::ndc::pop()","log4r::rollingfileoutputter#purge_log_files()","log4r::ndc::push()","log4r::mdc::put()","log4r::logger#remove()","log4r::mdc::remove()","log4r::ndc::remove()","log4r::rootlogger#remove()","log4r::datefileoutputter#requireschange()","log4r::rollingfileoutputter#requiresroll()","log4r::rollingfileoutputter#roll()","log4r::logger::root()","log4r::emailoutputter#send_mail()","log4r::gdc::set()","log4r::ndc::set_max_depth()","log4r::outputter::stderr()","log4r::outputter::stdout()","log4r::outputter#synch()","log4r::logger#trace=()","log4r::rootlogger#trace=()","log4r::log4rtools::valid_level?()","log4r::emailoutputter#validate()","log4r::outputter#validate_hash()","log4r::log4rtools::validate_level()","log4r::logger#validate_name()","log4r::emailoutputter#validate_smtp_params()","log4r::datefileoutputter#write()","log4r::iooutputter#write()","log4r::outputter#write()","log4r::rollingfileoutputter#write()","log4r::scribeoutputter#write()","log4r::udpoutputter#write()","","","","","","","","","","","","","","","",""],"info":[["Log4r","","Log4r.html","","<p>NDC\n<p>The NDC class implements a copy of the Nested Diagnostic Context, which is\npart of the Apache Log4j …\n"],["Log4r::BasicFormatter","","Log4r/BasicFormatter.html","","<p>BasicFormatter produces output like this:\n\n<pre>WARN loggername: I dropped my Wookie!</pre>\n<p>Or like this if trace is …\n"],["Log4r::ConfigError","","Log4r/ConfigError.html","","<p>Gets raised when Configurator encounters bad XML.\n<p>Gets raised when Configurator encounters bad YAML.\n"],["Log4r::Configurator","","Log4r/Configurator.html","","<p>See log4r/configurator.rb\n"],["Log4r::DateFileOutputter","","Log4r/DateFileOutputter.html","","<p>Additional hash arguments are:\n<p>:dirname &mdash; Directory of the log file\n<p>:date_pattern &mdash; Time.strftime format string …\n"],["Log4r::DefaultFormatter","","Log4r/DefaultFormatter.html","","<p>Outputters that don&#39;t define a Formatter will get this, which is\ncurrently BasicFormatter\n"],["Log4r::EmailOutputter","","Log4r/EmailOutputter.html","",""],["Log4r::FileOutputter","","Log4r/FileOutputter.html","","<p>Convenience wrapper for File. Additional hash arguments are:\n<p>:filename &mdash; Name of the file to log to.\n<p>:trunc … &mdash; "],["Log4r::Formatter","","Log4r/Formatter.html","","<p>Formatter is an abstract class and a null object\n"],["Log4r::GDC","","Log4r/GDC.html","","<p>See log4r/GDC.rb\n"],["Log4r::IOOutputter","","Log4r/IOOutputter.html","","<p>IO Outputter invokes print then flush on the wrapped IO object. If the IO\nstream dies, IOOutputter sets …\n"],["Log4r::Log4jXmlFormatter","","Log4r/Log4jXmlFormatter.html","",""],["Log4r::Log4rConfig","","Log4r/Log4rConfig.html","",""],["Log4r::Log4rTools","","Log4r/Log4rTools.html","","<p>Some common functions\n"],["Log4r::LogEvent","","Log4r/LogEvent.html","","<p>LogEvent wraps up all the miscellaneous data associated with a logging\nstatement. It gets passed around …\n"],["Log4r::LogServer","","Log4r/LogServer.html","","<p>See log4r/logserver.rb\n"],["Log4r::Logger","","Log4r/Logger.html","","<p>See log4r/logger.rb\n"],["Log4r::Logger::LoggerFactory","","Log4r/Logger/LoggerFactory.html","",""],["Log4r::Logger::Repository","","Log4r/Logger/Repository.html","",""],["Log4r::MDC","","Log4r/MDC.html","","<p>See log4r/MDC.rb\n"],["Log4r::NDC","","Log4r/NDC.html","","<p>See log4r/NDC.rb\n"],["Log4r::ObjectFormatter","","Log4r/ObjectFormatter.html","","<p>Formats objects the same way irb does:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">loggername</span>:<span class=\"ruby-identifier\">foo</span>.<span class=\"ruby-identifier\">rb</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-value\">12</span><span class=\"ruby-operator\">&gt;</span> \n[<span class=\"ruby-value\">1</span>, <span class=\"ruby-value\">3</span>, <span class=\"ruby-value\">4</span>]\n<span class=\"ruby-identifier\">loggername</span>:<span class=\"ruby-identifier\">foo</span>.<span class=\"ruby-identifier\">rb</span> <span class=\"ruby-keyword\">in</span> <span class=\"ruby-value\">13</span><span class=\"ruby-operator\">&gt;</span> \n{<span class=\"ruby-value\">1</span>=<span class=\"ruby-operator\">&gt;</span><span class=\"ruby-string\">&quot;1&quot;</span>}\n</pre>\n"],["Log4r::Outputter","","Log4r/Outputter.html","",""],["Log4r::Outputter::OutputterFactory","","Log4r/Outputter/OutputterFactory.html","",""],["Log4r::PatternFormatter","","Log4r/PatternFormatter.html","","<p>See log4r/formatter/patternformatter.rb\n"],["Log4r::ROMPClient","","Log4r/ROMPClient.html","",""],["Log4r::ROMPServer","","Log4r/ROMPServer.html","",""],["Log4r::RemoteOutputter","","Log4r/RemoteOutputter.html","","<p>See log4r/logserver.rb\n"],["Log4r::RollingFileOutputter","","Log4r/RollingFileOutputter.html","","<p>RollingFileOutputter - subclass of FileOutputter that rolls files on size\nor time. So, given a filename …\n"],["Log4r::RootLogger","","Log4r/RootLogger.html","","<p>RootLogger should be retrieved with Logger.root or Logger.global. It&#39;s\nsupposed to be transparent. …\n"],["Log4r::ScribeOutputter","","Log4r/ScribeOutputter.html","",""],["Log4r::SimpleFormatter","","Log4r/SimpleFormatter.html","","<p>SimpleFormatter produces output like this:\n\n<pre>WARN loggername&gt; Danger, Will Robinson, danger!</pre>\n<p>Does not write …\n"],["Log4r::StderrOutputter","","Log4r/StderrOutputter.html","","<p>Same as IOOutputter(name, $stderr)\n"],["Log4r::StdoutOutputter","","Log4r/StdoutOutputter.html","","<p>Same as IOOutputter(name, $stdout)\n"],["Log4r::SyslogOutputter","","Log4r/SyslogOutputter.html","",""],["Log4r::UDPOutputter","","Log4r/UDPOutputter.html","",""],["Log4r::YamlConfigurator","","Log4r/YamlConfigurator.html","","<p>See log4r/yamlconfigurator.rb\n"],["Object","","Object.html","",""],["REXML","","REXML.html","",""],["REXML::Element","","REXML/Element.html","",""],["==","Log4r::Logger","Log4r/Logger.html#method-i-3D-3D","(other)",""],["[]","Log4r::Configurator","Log4r/Configurator.html#method-c-5B-5D","(param)","<p>Get a parameter&#39;s value\n"],["[]","Log4r::Logger","Log4r/Logger.html#method-c-5B-5D","(_fullname)","<p>Get a logger with a fullname from the repository or nil if logger\nwasn&#39;t found.\n"],["[]","Log4r::Outputter","Log4r/Outputter.html#method-c-5B-5D","(name)","<p>Retrieve an outputter.\n"],["[]","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-5B-5D","(param)","<p>Get a parameter&#39;s value\n"],["[]=","Log4r::Configurator","Log4r/Configurator.html#method-c-5B-5D-3D","(param, value)","<p>Define a parameter with a value\n"],["[]=","Log4r::Outputter","Log4r/Outputter.html#method-c-5B-5D-3D","(name, outputter)","<p>Set an outputter.\n"],["[]=","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-5B-5D-3D","(param, value)","<p>Define a parameter with a value\n"],["actual_load","Log4r::Configurator","Log4r/Configurator.html#method-c-actual_load","(doc)",""],["actual_load","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-actual_load","( yaml_docs)",""],["add","Log4r::Logger","Log4r/Logger.html#method-i-add","(*_outputters)","<p>Add outputters by name or by reference. Can be done any time.\n"],["add","Log4r::RootLogger","Log4r/RootLogger.html#method-i-add","(*foo)","<p>Does nothing\n"],["additive=","Log4r::Logger","Log4r/Logger.html#method-i-additive-3D","(_additive)","<p>Set the additivity of the logger dynamically. True or false.\n"],["additive=","Log4r::RootLogger","Log4r/RootLogger.html#method-i-additive-3D","(foo)","<p>Does nothing\n"],["canonical_log","Log4r::EmailOutputter","Log4r/EmailOutputter.html#method-i-canonical_log","(event)",""],["canonical_log","Log4r::Outputter","Log4r/Outputter.html#method-i-canonical_log","(logevent)","<p>This method handles all log events passed to a typical Outputter.  Overload\nthis to change the overall …\n"],["canonical_log","Log4r::RemoteOutputter","Log4r/RemoteOutputter.html#method-i-canonical_log","(logevent)",""],["canonical_log","Log4r::SyslogOutputter","Log4r/SyslogOutputter.html#method-i-canonical_log","(logevent)",""],["change","Log4r::DateFileOutputter","Log4r/DateFileOutputter.html#method-i-change","()","<p>change the file\n"],["check_thread_instance","Log4r::MDC","Log4r/MDC.html#method-c-check_thread_instance","()",""],["check_thread_instance","Log4r::NDC","Log4r/NDC.html#method-c-check_thread_instance","()",""],["clear","Log4r::GDC","Log4r/GDC.html#method-c-clear","()",""],["clear","Log4r::NDC","Log4r/NDC.html#method-c-clear","()",""],["clone_stack","Log4r::NDC","Log4r/NDC.html#method-c-clone_stack","()",""],["close","Log4r::IOOutputter","Log4r/IOOutputter.html#method-i-close","()","<p>Close the IO and sets level to OFF\n"],["close","Log4r::SyslogOutputter","Log4r/SyslogOutputter.html#method-i-close","()",""],["closed?","Log4r::IOOutputter","Log4r/IOOutputter.html#method-i-closed-3F","()",""],["closed?","Log4r::SyslogOutputter","Log4r/SyslogOutputter.html#method-i-closed-3F","()",""],["comma_split","Log4r::Log4rTools","Log4r/Log4rTools.html#method-c-comma_split","(string)","<p>Splits comma-delimited lists with arbitrary s padding\n"],["custom_levels","Log4r::Configurator","Log4r/Configurator.html#method-c-custom_levels","(*levels)","<p>Sets the custom levels. This method accepts symbols or strings.\n\n<pre>Configurator.custom_levels(&#39;My&#39;, &#39;Custom&#39;, ...</pre>\n"],["custom_levels","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-custom_levels","( levels)",""],["deal_with_inheritance","Log4r::Logger","Log4r/Logger.html#method-i-deal_with_inheritance","(_level)","<p>Parses name for location in heiarchy, sets the parent, and deals with level\ninheritance\n"],["decode_bool","Log4r::Log4rTools","Log4r/Log4rTools.html#method-c-decode_bool","(hash, symbol, default)","<p>Shortcut for decoding &#39;true&#39;, &#39;false&#39;, true, false or nil\ninto a bool from a hash parameter. …\n"],["decode_custom_levels","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_custom_levels","(e)",""],["decode_custom_levels","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_custom_levels","( levels)",""],["decode_formatter","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_formatter","(e)",""],["decode_formatter","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_formatter","( fo)",""],["decode_hash_params","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_hash_params","(e)","<p>Does the fancy parameter to hash argument transformation\n"],["decode_hash_params","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_hash_params","(ph)","<p>Does the fancy parameter to hash argument transformation\n"],["decode_immediate_at","Log4r::EmailOutputter","Log4r/EmailOutputter.html#method-i-decode_immediate_at","(hash)",""],["decode_logger","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_logger","(e)",""],["decode_logger","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_logger","( lo)",""],["decode_logger_common","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_logger_common","(l, e)",""],["decode_logger_common","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_logger_common","( l, lo)",""],["decode_logserver","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_logserver","(e)",""],["decode_logserver","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_logserver","( lo)",""],["decode_outputter","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_outputter","(e)",""],["decode_outputter","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_outputter","( op)",""],["decode_parameter","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_parameter","(e)",""],["decode_parameters","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_parameters","(e)",""],["decode_parameters","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_parameters","( params)",""],["decode_pre_config","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_pre_config","(e)",""],["decode_pre_config","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_pre_config","( pre)",""],["decode_xml","Log4r::Configurator","Log4r/Configurator.html#method-c-decode_xml","(doc)",""],["decode_yaml","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-decode_yaml","( cfg)",""],["detect_rexml","Log4r::Configurator","Log4r/Configurator.html#method-c-detect_rexml","()",""],["each","Log4r::Logger","Log4r/Logger.html#method-c-each","()","<p>Yields fullname and logger for every logger in the system.\n"],["each","Log4r::Outputter","Log4r/Outputter.html#method-c-each","()","<p>Yields each outputter&#39;s name and reference.\n"],["each_logger","Log4r::Logger","Log4r/Logger.html#method-c-each_logger","()",""],["each_outputter","Log4r::Outputter","Log4r/Outputter.html#method-c-each_outputter","()",""],["flush","Log4r::EmailOutputter","Log4r/EmailOutputter.html#method-i-flush","()","<p>send out an email with the current buffer\n"],["flush","Log4r::Outputter","Log4r/Outputter.html#method-i-flush","()","<p>Call flush to force an outputter to write out any buffered log events.\nSimilar to IO#flush, so use in …\n"],["flush","Log4r::RemoteOutputter","Log4r/RemoteOutputter.html#method-i-flush","()","<p>Call flush to send any remaining LogEvents to the remote server.\n"],["format","Log4r::BasicFormatter","Log4r/BasicFormatter.html#method-i-format","(event)",""],["format","Log4r::Formatter","Log4r/Formatter.html#method-i-format","(logevent)","<p>Define this method in a subclass to format data.\n"],["format","Log4r::Log4jXmlFormatter","Log4r/Log4jXmlFormatter.html#method-i-format","(logevent)",""],["format","Log4r::ObjectFormatter","Log4r/ObjectFormatter.html#method-i-format","(event)",""],["format","Log4r::Outputter","Log4r/Outputter.html#method-i-format","(logevent)","<p>Common method to format data. All it does is call the resident\nformatter&#39;s format method. If a different …\n"],["format","Log4r::SimpleFormatter","Log4r/SimpleFormatter.html#method-i-format","(event)",""],["format_object","Log4r::BasicFormatter","Log4r/BasicFormatter.html#method-i-format_object","(obj)","<p>Formats data according to its class:\n<p>String &mdash; Prints it out as normal.\n<p>Exception &mdash; Produces output similar …\n"],["formatter=","Log4r::Outputter","Log4r/Outputter.html#method-i-formatter-3D","(_formatter)","<p>Dynamically change the formatter. You can just specify a Class object and\nthe formatter will invoke  …\n"],["get","Log4r::GDC","Log4r/GDC.html#method-c-get","()",""],["get","Log4r::Logger","Log4r/Logger.html#method-c-get","(_fullname)","<p>Like Logger[] except that it raises NameError if Logger wasn&#39;t found.\n"],["get","Log4r::MDC","Log4r/MDC.html#method-c-get","( a_key )",""],["get","Log4r::NDC","Log4r/NDC.html#method-c-get","()",""],["get_context","Log4r::MDC","Log4r/MDC.html#method-c-get_context","()",""],["get_current_sequence_number","Log4r::RollingFileOutputter","Log4r/RollingFileOutputter.html#method-i-get_current_sequence_number","()","<p>Get the highest existing log file sequence number, or 1 if there are no\nexisting log files.\n"],["get_depth","Log4r::NDC","Log4r/NDC.html#method-c-get_depth","()",""],["get_levels_map","Log4r::SyslogOutputter","Log4r/SyslogOutputter.html#method-i-get_levels_map","()",""],["global","Log4r::Logger","Log4r/Logger.html#method-c-global","()","<p>Returns the root logger. Identical to Logger.root\n"],["global_config","Log4r::Configurator","Log4r/Configurator.html#method-c-global_config","(e)",""],["global_config","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-global_config","( e)",""],["inherit","Log4r::NDC","Log4r/NDC.html#method-c-inherit","( a_stack )",""],["is_root?","Log4r::Logger","Log4r/Logger.html#method-i-is_root-3F","()",""],["is_root?","Log4r::RootLogger","Log4r/RootLogger.html#method-i-is_root-3F","()",""],["level=","Log4r::Logger","Log4r/Logger.html#method-i-level-3D","(_level)","<p>Set the logger level dynamically. Does not affect children.\n"],["level=","Log4r::Outputter","Log4r/Outputter.html#method-i-level-3D","(_level)","<p>dynamically change the level\n"],["level=","Log4r::RootLogger","Log4r/RootLogger.html#method-i-level-3D","(alevel)","<p>Set the global level. Any loggers defined thereafter will not log below the\nglobal level regardless of …\n"],["levels","Log4r::Logger","Log4r/Logger.html#method-i-levels","()","<p>Return array of defined levels.\n"],["load_xml_file","Log4r::Configurator","Log4r/Configurator.html#method-c-load_xml_file","(filename)","<p>Given a filename, loads the XML configuration for Log4r.\n"],["load_xml_string","Log4r::Configurator","Log4r/Configurator.html#method-c-load_xml_string","(string)","<p>You can load a String XML configuration instead of a file.\n"],["load_yaml_file","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-load_yaml_file","( filename)","<p>Given a filename, loads the YAML configuration for Log4r.\n"],["load_yaml_string","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-load_yaml_string","( string)","<p>You can load a String YAML configuration instead of a file.\n"],["log_internal","Log4r::Logger","Log4r/Logger.html#method-c-log_internal","(level=1)","<p>Internal logging for Log4r components. Accepts only blocks. To see such log\nevents, create a logger named …\n"],["makeNewFilename","Log4r::DateFileOutputter","Log4r/DateFileOutputter.html#method-i-makeNewFilename","()","<p>construct a new filename from the DateStamp\n"],["makeNewFilename","Log4r::RollingFileOutputter","Log4r/RollingFileOutputter.html#method-i-makeNewFilename","()","<p>Constructs a new filename from the @current_sequence_number,\n@core_file_name, and @file_extension, and …\n"],["map_levels_by_name_to_syslog","Log4r::SyslogOutputter","Log4r/SyslogOutputter.html#method-i-map_levels_by_name_to_syslog","( lmap = SYSLOG_LOG4R_MAP )","<p>A single hash argument that maps custom names to syslog names\n<p>levels_map &mdash; A map that will create a linkage …\n\n"],["new","Log4r::BasicFormatter","Log4r/BasicFormatter.html#method-c-new","(hash={})",""],["new","Log4r::DateFileOutputter","Log4r/DateFileOutputter.html#method-c-new","(_name, hash={})",""],["new","Log4r::EmailOutputter","Log4r/EmailOutputter.html#method-c-new","(_name, hash={})",""],["new","Log4r::FileOutputter","Log4r/FileOutputter.html#method-c-new","(_name, hash={})",""],["new","Log4r::Formatter","Log4r/Formatter.html#method-c-new","(hash={})",""],["new","Log4r::IOOutputter","Log4r/IOOutputter.html#method-c-new","(_name, _out, hash={})","<p>IOOutputter needs an IO object to write to.\n"],["new","Log4r::LogEvent","Log4r/LogEvent.html#method-c-new","(level, logger, tracer, data)",""],["new","Log4r::LogServer","Log4r/LogServer.html#method-c-new","(_fullname, _uri, _level=nil, _additive=true, _trace=false, &accept)","<p>A valid ROMP uri must be specified.\n"],["new","Log4r::Logger","Log4r/Logger.html#method-c-new","(_fullname, _level=nil, _additive=true, _trace=false)","<p>Logger requires a name. The last 3 parameters are:\n<p>level &mdash; Do I have a level? (Otherwise, I&#39;ll inherit …\n"],["new","Log4r::Outputter","Log4r/Outputter.html#method-c-new","(_name, hash={})","<p>An Outputter needs a name. RootLogger will be loaded if not already done.\nThe hash arguments are as follows: …\n"],["new","Log4r::PatternFormatter","Log4r/PatternFormatter.html#method-c-new","(hash={})","<p>Accepts the following hash arguments (either a string or a symbol):\n<p>pattern &mdash; A pattern format string.\n<p>date_pattern … &mdash; "],["new","Log4r::RemoteOutputter","Log4r/RemoteOutputter.html#method-c-new","(_name, hash={})",""],["new","Log4r::RollingFileOutputter","Log4r/RollingFileOutputter.html#method-c-new","(_name, hash={})",""],["new","Log4r::RootLogger","Log4r/RootLogger.html#method-c-new","()",""],["new","Log4r::ScribeOutputter","Log4r/ScribeOutputter.html#method-c-new","(_name, hash={})",""],["new","Log4r::StderrOutputter","Log4r/StderrOutputter.html#method-c-new","(_name, hash={})",""],["new","Log4r::StdoutOutputter","Log4r/StdoutOutputter.html#method-c-new","(_name, hash={})",""],["new","Log4r::SyslogOutputter","Log4r/SyslogOutputter.html#method-c-new","(_name, hash={})","<p>There are 3 hash arguments\n<p>:ident &mdash; syslog ident, defaults to _name\n<p>:logopt &mdash; syslog logopt, defaults to LOG_PID …\n"],["new","Log4r::UDPOutputter","Log4r/UDPOutputter.html#method-c-new","(_name, hash={})",""],["only_at","Log4r::Outputter","Log4r/Outputter.html#method-i-only_at","(*levels)","<p>Set the levels to log. All others will be ignored\n"],["open_log_file","Log4r::RollingFileOutputter","Log4r/RollingFileOutputter.html#method-i-open_log_file","(mode)","<p>Open @filename with the given mode:\n\n<pre>&#39;a&#39; - appends to the end of the file if it exists; otherwise creates ...</pre>\n"],["outputters=","Log4r::Logger","Log4r/Logger.html#method-i-outputters-3D","(_outputters)","<p>Set the Outputters dynamically by name or reference. Can be done any time.\n"],["outputters=","Log4r::RootLogger","Log4r/RootLogger.html#method-i-outputters-3D","(foo)","<p>Does nothing\n"],["paramsub","Log4r::Configurator","Log4r/Configurator.html#method-c-paramsub","(str)","<p>Substitues any #{foo} in the XML with Parameter\n"],["paramsub","Log4r::YamlConfigurator","Log4r/YamlConfigurator.html#method-c-paramsub","(str)","<p>Substitues any #{foo} in the YAML with Parameter\n"],["parent=","Log4r::Logger","Log4r/Logger.html#method-i-parent-3D","(parent)","<p>Please don&#39;t reset the parent\n"],["parse_caller","Log4r::Log4jXmlFormatter","Log4r/Log4jXmlFormatter.html#method-i-parse_caller","(line)",""],["peek","Log4r::NDC","Log4r/NDC.html#method-c-peek","()",""],["pop","Log4r::NDC","Log4r/NDC.html#method-c-pop","()",""],["purge_log_files","Log4r::RollingFileOutputter","Log4r/RollingFileOutputter.html#method-i-purge_log_files","(number_to_keep)","<p>Delete all but the latest number_to_keep log files.\n"],["push","Log4r::NDC","Log4r/NDC.html#method-c-push","( value )",""],["put","Log4r::MDC","Log4r/MDC.html#method-c-put","( a_key, a_value )",""],["remove","Log4r::Logger","Log4r/Logger.html#method-i-remove","(*_outputters)","<p>Remove outputters from this logger by name only. Can be done any time.\n"],["remove","Log4r::MDC","Log4r/MDC.html#method-c-remove","( a_key )",""],["remove","Log4r::NDC","Log4r/NDC.html#method-c-remove","()",""],["remove","Log4r::RootLogger","Log4r/RootLogger.html#method-i-remove","(*foo)","<p>Does nothing\n"],["requiresChange","Log4r::DateFileOutputter","Log4r/DateFileOutputter.html#method-i-requiresChange","()","<p>does the file require a change?\n"],["requiresRoll","Log4r::RollingFileOutputter","Log4r/RollingFileOutputter.html#method-i-requiresRoll","()","<p>does the file require a roll?\n"],["roll","Log4r::RollingFileOutputter","Log4r/RollingFileOutputter.html#method-i-roll","()","<p>roll the file\n"],["root","Log4r::Logger","Log4r/Logger.html#method-c-root","()","<p>Returns the root logger. Identical to Logger.global\n"],["send_mail","Log4r::EmailOutputter","Log4r/EmailOutputter.html#method-i-send_mail","()",""],["set","Log4r::GDC","Log4r/GDC.html#method-c-set","( a_name )",""],["set_max_depth","Log4r::NDC","Log4r/NDC.html#method-c-set_max_depth","( max_depth )",""],["stderr","Log4r::Outputter","Log4r/Outputter.html#method-c-stderr","()",""],["stdout","Log4r::Outputter","Log4r/Outputter.html#method-c-stdout","()",""],["synch","Log4r::Outputter","Log4r/Outputter.html#method-i-synch","()",""],["trace=","Log4r::Logger","Log4r/Logger.html#method-i-trace-3D","(_trace)","<p>Set whether the logger traces. Can be set dynamically. Defaults to false\nand understands the strings …\n"],["trace=","Log4r::RootLogger","Log4r/RootLogger.html#method-i-trace-3D","(foo)","<p>Does nothing\n"],["valid_level?","Log4r::Log4rTools","Log4r/Log4rTools.html#method-c-valid_level-3F","(lev)",""],["validate","Log4r::EmailOutputter","Log4r/EmailOutputter.html#method-i-validate","(hash)",""],["validate_hash","Log4r::Outputter","Log4r/Outputter.html#method-i-validate_hash","(hash)","<p>Validates the common hash arguments. For now, that would be\n<code>:level</code>, <code>:formatter</code> and the string equivalents …\n"],["validate_level","Log4r::Log4rTools","Log4r/Log4rTools.html#method-c-validate_level","(level, depth=0)","<p>Raises ArgumentError if level argument is an invalid level. Depth specifies\nhow many trace entries to …\n"],["validate_name","Log4r::Logger","Log4r/Logger.html#method-i-validate_name","(_fullname)",""],["validate_smtp_params","Log4r::EmailOutputter","Log4r/EmailOutputter.html#method-i-validate_smtp_params","(hash)",""],["write","Log4r::DateFileOutputter","Log4r/DateFileOutputter.html#method-i-write","(data)","<p>perform the write\n"],["write","Log4r::IOOutputter","Log4r/IOOutputter.html#method-i-write","(data)","<p>perform the write\n"],["write","Log4r::Outputter","Log4r/Outputter.html#method-i-write","(data)","<p>Abstract method to actually write the data to a destination. Custom\noutputters should overload this to …\n"],["write","Log4r::RollingFileOutputter","Log4r/RollingFileOutputter.html#method-i-write","(data)","<p>perform the write\n"],["write","Log4r::ScribeOutputter","Log4r/ScribeOutputter.html#method-i-write","(data)",""],["write","Log4r::UDPOutputter","Log4r/UDPOutputter.html#method-i-write","(data)",""],["GDC","","lib/log4r/rdoc/GDC.html","","<p>GDC\n<p>The GDC class implements a copy of the Global Diagnostic Context, which is\nnot part of the Apache …\n"],["MDC","","lib/log4r/rdoc/MDC.html","","<p>MDC\n<p>The MDC class implements a copy of the Mapped Diagnostic Context, which is\npart of the Apache Log4j …\n"],["NDC","","lib/log4r/rdoc/NDC.html","","<p>NDC\n<p>The NDC class implements a copy of the Nested Diagnostic Context, which is\npart of the Apache Log4j …\n"],["configurator","","lib/log4r/rdoc/configurator.html","","<p>Configuring Log4r with Log4r::Configurator\n<p>The Configurator class allows one to set up Log4r via XML. …\n"],["emailoutputter","","lib/log4r/rdoc/emailoutputter.html","","<p>EmailOutputter\n<p>This is an experimental class that sends a number of formatted log events\nas  an RFC 822 …\n"],["formatter","","lib/log4r/rdoc/formatter.html","","<p>Formatters\n<p>Formatters are responsible for formatting LogEvent data. An Outputter\nowning a Formatter will …\n"],["log4jxmlformatter","","lib/log4r/rdoc/log4jxmlformatter.html","","<p>Configuring Log4r with Log4r::YamlConfigurator\n<p>The YamlConfigurator class allows one to set up Log4r via …\n"],["log4r","","lib/log4r/rdoc/log4r.html","","<p>#{version} Log4r API Reference\n<p>Welcome to the Log4r API reference. There are two classes of reference, …\n"],["logger","","lib/log4r/rdoc/logger.html","","<p>Loggers\n<p>Loggers provide the interface for logging in Log4r. To create a logger,\nfirst come up with a name …\n"],["logserver","","lib/log4r/rdoc/logserver.html","","<p>Remote Logging \n<p>Want to use Log4r over a network? No problem! A Log4r::RemoteOutputter will\nsend its  …\n"],["outputter","","lib/log4r/rdoc/outputter.html","","<p>Outputters\n<p>An Outputter is a logging destination with a particular way to format data.\nIt has a level …\n"],["patternformatter","","lib/log4r/rdoc/patternformatter.html","","<p>PatternFormatter\n<p>PatternFormatter offers complete control over the appearance of Log4r log\nevents without …\n"],["scribeoutputter","","lib/log4r/rdoc/scribeoutputter.html","","<p>ScribeOutputter\n<p>A ScribeOutputter transforms a Log4r::LogEvent into an event passed to\nScribe. The user …\n"],["syslogoutputter","","lib/log4r/rdoc/syslogoutputter.html","","<p>SyslogOutputter\n<p>A SyslogOutputter transforms a Log4r::LogEvent into a call to syslog().\nSince syslog has …\n"],["win32eventoutputter","","lib/log4r/rdoc/win32eventoutputter.html","","<p>Win32EventOutputter\n<p>THIS IS A DEVELOPMENT VERSION AND IS NOT READY FOR USE INFACT, IT MAY NEVER\nBE READY …\n"],["yamlconfigurator","","lib/log4r/rdoc/yamlconfigurator.html","","<p>Configuring Log4r with Log4r::YamlConfigurator\n<p>The YamlConfigurator class allows one to set up Log4r via …\n"]]}}