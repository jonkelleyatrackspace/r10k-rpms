--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: This is create identifier, which is used to decide if the <em>json_create</em> hook of a class should be called. It defaults to 'json_class'.
  name: create_id
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "The global default options for the JSON.dump method:"
  - !ruby/struct:SM::Flow::VERB 
    body: " :max_nesting: false\n :allow_nan:   true\n :quirks_mode: true\n"
  name: dump_default_options
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Returns the JSON generator module that is used by JSON. This is either JSON::Ext::Generator or JSON::Pure::Generator.
  name: generator
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: "The global default options for the JSON.load method:"
  - !ruby/struct:SM::Flow::VERB 
    body: " :max_nesting: false\n :allow_nan:   true\n :quirks_mode: true\n"
  name: load_default_options
  rw: RW
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Returns the JSON parser class that is used by JSON. This is either JSON::Ext::Parser or JSON::Pure::Parser.
  name: parser
  rw: R
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: Returns the JSON generator state class that is used by JSON. This is either JSON::Ext::Generator::State or JSON::Pure::Generator::State.
  name: state
  rw: RW
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: const_defined_in?
- !ruby/object:RI::MethodSummary 
  name: const_defined_in?
- !ruby/object:RI::MethodSummary 
  name: iconv
- !ruby/object:RI::MethodSummary 
  name: iconv
comment: 
- !ruby/struct:SM::Flow::H 
  level: 1
  text: JavaScript Object Notation (JSON)
- !ruby/struct:SM::Flow::P 
  body: JSON is a lightweight data-interchange format. It is easy for us humans to read and write. Plus, equally simple for machines to generate or parse. JSON is completely language agnostic, making it the ideal interchange format.
- !ruby/struct:SM::Flow::P 
  body: "Built on two universally available structures:"
- !ruby/struct:SM::Flow::VERB 
  body: "  1. A collection of name/value pairs. Often referred to as an <em>object</em>, hash table, record, struct, keyed list, or associative array.\n  2. An ordered list of values. More commonly called an <em>array</em>, vector, sequence or list.\n"
- !ruby/struct:SM::Flow::P 
  body: "To read more about JSON visit: http://json.org"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Parsing JSON
- !ruby/struct:SM::Flow::P 
  body: "To parse a JSON string received by another application or generated within your existing application:"
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'json'\n\n  my_hash = JSON.parse('{&quot;hello&quot;: &quot;goodbye&quot;}')\n  puts my_hash[&quot;hello&quot;] =&gt; &quot;goodbye&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: Notice the extra quotes <tt>''</tt> around the hash notation. Ruby expects the argument to be a string and can't convert objects like a hash or array.
- !ruby/struct:SM::Flow::P 
  body: Ruby converts your string into a hash
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Generating JSON
- !ruby/struct:SM::Flow::P 
  body: Creating a JSON string for communication or serialization is just as simple.
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'json'\n\n  my_hash = {:hello =&gt; &quot;goodbye&quot;}\n  puts JSON.generate(my_hash) =&gt; &quot;{\\&quot;hello\\&quot;:\\&quot;goodbye\\&quot;}&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "Or an alternative way:"
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'json'\n  puts {:hello =&gt; &quot;goodbye&quot;}.to_json =&gt; &quot;{\\&quot;hello\\&quot;:\\&quot;goodbye\\&quot;}&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "<tt>JSON.generate</tt> only allows objects or arrays to be converted to JSON syntax. <tt>to_json</tt>, however, accepts many Ruby classes even though it acts only as a method for serialization:"
- !ruby/struct:SM::Flow::VERB 
  body: "  require 'json'\n\n  1.to_json =&gt; &quot;1&quot;\n"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  name: NaN
  value: 0.0/0
- !ruby/object:RI::Constant 
  comment: 
  name: Infinity
  value: 1.0/0
- !ruby/object:RI::Constant 
  comment: 
  name: MinusInfinity
  value: -Infinity
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: For backwards compatibility
  name: UnparserError
  value: GeneratorError
- !ruby/object:RI::Constant 
  comment: 
  name: JSON_LOADED
  value: true unless defined?(::JSON::JSON_LOADED)
- !ruby/object:RI::Constant 
  comment: 
  name: JSON_LOADED
  value: true unless defined?(::JSON::JSON_LOADED)
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: JSON version
  name: VERSION
  value: "'1.8.1'"
full_name: JSON
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: dump
- !ruby/object:RI::MethodSummary 
  name: fast_generate
- !ruby/object:RI::MethodSummary 
  name: generate
- !ruby/object:RI::MethodSummary 
  name: load
- !ruby/object:RI::MethodSummary 
  name: parse
- !ruby/object:RI::MethodSummary 
  name: parse!
- !ruby/object:RI::MethodSummary 
  name: pretty_generate
- !ruby/object:RI::MethodSummary 
  name: recurse_proc
- !ruby/object:RI::MethodSummary 
  name: restore
- !ruby/object:RI::MethodSummary 
  name: valid_utf8?
- !ruby/object:RI::MethodSummary 
  name: valid_utf8?
name: JSON
superclass: 
